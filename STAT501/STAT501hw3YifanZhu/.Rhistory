CIa <- qnorm(pr2) * sqrt(sigma2) * c(-1, 1) + gamma
list(gamma = gamma, C = C, D = D, sigma = sqrt(sigma2), Level = paste(
100 * pr, "%", sep = ""), CI = paste(c("[", max(CIa[1], -1),
", ", min(CIa[2], 1), "]"), collapse = ""))
}
Gamma2.f(xf)
Gamma2.f(xm)
xb <- matrix(c(10, 5, 10, 31, 10, 4,
22, 18, 9), 3, 3, byrow=T)
xw <- matrix(c(9, 10, 5, 26, 6, 13,
10, 17, 10), 3, 3, byrow=T)
#   This file contains R code for computing a
#   Kappa statistic, or weighted Kappa statistic,
#   standard errors and confidence intervals.
#   It is applied to the student teacher data.
#   The file is posted as  kappa.R
# First create a function to compute kappa
kappa.f <- function(x, w=NULL)
{
#  Compute expected counts for random agreement
n <- sum(x)
xr <- apply(x, 1, sum)
xc <- apply(x, 2, sum)
one <- rep(1, length(xr))
e <- outer(xr, xc)/n
#  Compute the unweighted Kappa
k1 <- sum(diag(x))/n
k2 <- sum(diag(e))/n
k3 <- sum(diag(x)*diag(xr+xc))/(n*n)
k4 <- sum(((outer(xc, one)+
outer(one, xr))**2)*x)/(n**3)
kappa <- (k1-k2)/(1-k2)
#  Compute standard errors:
#     s1 does not assume random agreement
#     s2 assumes only random agreement
s11 <- (k1*(1-k1)/((1-k2)**2)+2*(1-k1)*
(2*k1*k2-k3)/((1-k2)**3)+
((1-k1)**2)*(k4-4*k2*k2)/((1-k2)**4))/n
s1 <- s11**.5
s22 <- (k2+k2*k2-(sum(diag(e)*diag(xr+xc))
/(n**2)))/(n*(1-k2)**2)
s2 <- s22**.5
# Compute default weights if no weights are provided
k <- dim(x)[2]
if (is.null(w)) {
w <- matrix(0, ncol = k, nrow = k)
for (i in 1:k) {
for (j in 1:k) {
w[i, j] <- 1 - (abs(i - j))^2/(k-1)^2
}
}
}
#  Compute the weighted Kappa
xw <- x*w
ew <- e*w
wr <- apply(w*xc, 2, sum)/n
wc <- apply(w*xr, 2, sum)/n
kw1 <- sum(xw)/n
kw2 <- sum(ew)/n
tt2 <- outer(wr, one)+outer(one, wc)
tt3 <- ((w*(1-kw2))-(tt2*(1-kw1)))**2
kappaw <- (kw1-kw2)/(1-kw2)
#  Compute standard errors:
#     sw11 does not assume random agreement
#     sw22  assumes only random agreement
sw11 <- sum(x*tt3)/n
sw11 <- (sw11-(kw1*kw2-2*kw2+kw1)**2)/
(n*(1-kw2)**4)
sw1 <- sw11**.5
sw22 <- (w-tt2)**2
sw22 <- ((sum(e*sw22)/n)-(kw2**2))/
(n*(1-kw2)**2)
sw2 <- sw22**.5
#  Construct 95% confidence intervals
#  and tests for random agreement
tk <- kappa/s2
tkw <- kappaw/sw2
tt4 <- tk**2
pk <- (1-pchisq(tt4, 1))
tt4 <- tkw**2
pkw <-(1-pchisq(tt4, 1))
ckl <- kappa-(1.96)*s1
cku <- kappa+(1.96)*s1
ckwl <- kappaw-(1.96)*sw1
ckwu <- kappaw+(1.96)*sw1
ww <- matrix( w, ncol=k, nrow=k)
#print results
cat("\n", "       Unweighted Kappa = ", signif(kappa,5))
cat("\n", "         Standard error = ", signif(s1,5))
cat("\n", "95% confidence interval:  ", signif(ckl,5), signif(cku,5))
cat("\n", "p-value for test of random agreement = ", signif(pk,5), "\n", "\n")
cat("\n", "         Weighted Kappa = ", signif(kappaw,5))
cat("\n", "         Standard error = ", signif(sw1,5))
cat("\n", "95% confidence interval:  ", signif(ckwl,5), signif(ckwu,5))
cat("\n", "p-value for test of random agreement = ", signif(pkw,5),"\n")
}
kappa.f(xw)
kappa.f(xb)
source('C:/Users/fanne/Dropbox/Homework/STAT557/STAT557hw2YifanZhu/kappaboot.R')
results
boot.ci(results, type="all", index=1)
?boot.ci
source('C:/Users/fanne/Dropbox/Homework/STAT557/STAT557hw2YifanZhu/kappaboot.R')
boot.ci(results, type="all", index=1)
0.061583^2 +  0.054328^2
-0.12456 - (-0.073792)
-0.050768 - 1.96 *0.006743997
-0.050768 + 1.96 *0.006743997
x.array <- array(c(81, 34, 24, 71, 118, 74, 69, 105, 82, 63, 52, 93),c(2,2,3))
mantelhaen.test(x.array, conf.level=0.95)
?mantelhaen.test
library(DescTools)
install.packages("DescTools")
library(DescTools)
BreslowDayTest(x.array)
mantelhaen.test(x.array, conf.level=0.95, exact = T)
?Zelen
??zelen
install.packages("NSM3")
library(NSM3)
zelen.test(x.array)
?zelen.test
zelen.test(example = T)
zelen.test(x.array, 5)
zelen.test(x.array, r = 5)
install.packages("VGAM")
M <- c(500, 1000*1:10, 20000, 50000, 100000, 200000)
M
?boot
library(boot)
?boot
aircondit
d <- data.frame(n = 10, lambda = 5, method1 = c(1,2,3))
d
?row.names
row.names(d) <- c("m1, m2, m3")
row.names(d) <- c("", m1, m2, m3")
)
row.names(d)
row.names(d) <- c("m1", "m2", "m3")
d
rm(d)
for (M in c(100)){
xs <- matrix(rnorm(M*N), ncol = N)
ys <- matrix(rnorm(M*N), ncol = N)
for (n in 1:N){
P1Ms[n] <- P1M(xs[,n],y[,n])
P2Ms[n] <- P2M(xs[,n],y[,n])
}
P1Mss <- rbind(P1Mss, P1Ms)
P2Mss <- rbind(P2Mss, P2Ms)
}
Ms <- c(100*1:10, 2000)
N <- 2000
P1Ms <- rep(0, N)
P2Ms <- P1Ms
P1M <- function(x,y){
M <- length(x)
return(sum(x<y)/M)
}
P2M <- function(x,y){
M <- length(x)
x1 <- rep(x, times = M)
y1 <- rep(y, each = M)
return(sum(x1 < y1)/M^2)
}
P1Mss <- NULL
P2Mss <- NULL
for (M in c(100)){
xs <- matrix(rnorm(M*N), ncol = N)
ys <- matrix(rnorm(M*N), ncol = N)
for (n in 1:N){
P1Ms[n] <- P1M(xs[,n],y[,n])
P2Ms[n] <- P2M(xs[,n],y[,n])
}
P1Mss <- rbind(P1Mss, P1Ms)
P2Mss <- rbind(P2Mss, P2Ms)
}
for (M in c(100)){
xs <- matrix(rnorm(M*N), ncol = N)
ys <- matrix(rnorm(M*N), ncol = N)
for (n in 1:N){
P1Ms[n] <- P1M(xs[,n],ys[,n])
P2Ms[n] <- P2M(xs[,n],ys[,n])
}
P1Mss <- rbind(P1Mss, P1Ms)
P2Mss <- rbind(P2Mss, P2Ms)
}
P1Mss
head(P1Mss)
P1Mss[1:5]
P1Mss[,1:5]
length(xs[,1])
for (M in c(1000)){
xs <- matrix(rnorm(M*N), ncol = N)
ys <- matrix(rnorm(M*N), ncol = N)
for (n in 1:N){
P1Ms[n] <- P1M(xs[,n],ys[,n])
P2Ms[n] <- P2M(xs[,n],ys[,n])
}
P1Mss <- rbind(P1Mss, P1Ms)
P2Mss <- rbind(P2Mss, P2Ms)
}
dim(P1Mss)
?var
apply(P1Mss, dim = 2, var)
apply(P1Mss, dim = 2, FUN = var)
apply(P1Mss, MARGIN = 2, FUN = var)
apply(P1Mss, MARGIN = 1, FUN = var)
apply(P2Mss, MARGIN = 1, FUN = var)
apply(P1Mss, MARGIN = 1, FUN = var)/apply(P1Mss, MARGIN = 1, FUN = var)
apply(P1Mss, MARGIN = 1, FUN = var)/apply(P2Mss, MARGIN = 1, FUN = var)
P1Mss <- NULL
P2Mss <- NULL
Ms <- c(100*1:10, 2000)
N <- 2000
P1Ms <- rep(0, N)
P2Ms <- P1Ms
for (M in Ms){
xs <- matrix(rnorm(M*N), ncol = N)
ys <- matrix(rnorm(M*N), ncol = N)
for (n in 1:N){
P1Ms[n] <- P1M(xs[,n],ys[,n])
P2Ms[n] <- P2M(xs[,n],ys[,n])
}
P1Mss <- cbind(P1Mss, P1Ms)
P2Mss <- cbind(P2Mss, P2Ms)
}
ep1m <- apply(P1Mss, MARGIN = 2, FUN = mean)
ep1m <- apply(P2Mss, MARGIN = 2, FUN = mean)
varp1m <- apply(P1Mss, MARGIN = 2, FUN = var)
varp2m <- apply(P2Mss, MARGIN = 2, FUN = var)
ep1m
ep2m
ep1m <- apply(P1Mss, MARGIN = 2, FUN = mean)
ep2m <- apply(P2Mss, MARGIN = 2, FUN = mean)
ep1m
ep2m
varp1m
varp2m
varp1m/varp2m
setwd("C:/Users/fanne/Dropbox/Homework/STAT501/STAT501hw3YifanZhu")
sigma <- 1
Sigma <- diag(rep(sigma^2, n-1)) - matrix(rep((sigma^2/n), (n-1)*(n-1)), nrow = n-1)
n <- 4
Sigma <- diag(rep(sigma^2, n-1)) - matrix(rep((sigma^2/n), (n-1)*(n-1)), nrow = n-1)
Sigma
X.gen <- function(xbar, n, sigma){
mu <- rep(xbar, n-1)
Sigma <- diag(rep(sigma^2, n-1)) - matrix(rep((sigma^2/n), (n-1)*(n-1)), nrow = n-1)
Y1 <- mvrnorm(mu = mu, Sigma = Sigma)
X <- c(Y1, n*xbar - sum(Y1))
return(X)
}
# 1(b) generate random vector X given X-bar.
library(MASS)
X.gen(1, 4, 1)
# 1(c)
## i.
## read the image
library(rtiff)
install.packages("rtiff")
# 1(c)
## i.
## read the image
library(rtiff)
owlet <- readTiff(fn = "Indian_spotted_owlet.tiff")
plot(owlet)
str(owlet)
?pixmapRGB
owletm <- array(dim  = c(owlet@size, 3))
owletm[,,1] <- owlet@red
owletm[,,2] <- owlet@green
owletm[,,3] <- owlet@blue
owlet1 <- pixmapRGB(owletm)
str(owlet1)
plot(owlet1)
plot(owlet1)
supres <- function(x){
y <- X.gen(x, 16, 0.4)
return(matrix(y, nrow = 4))
}
supres <- function(x){
y <- X.gen(x, 16, 0.4)
return(matrix(y, nrow = 4))
}
## high resolution matrix for red channel
owletsupr <- kronecker(X = owlet@red, FUN = supres)
## high resolution matrix for red channel
owletsupr <- kronecker(X = owlet@red, Y = 1, FUN = supres)
## high resolution matrix for red channel
owletsupr <- kronecker(X = owlet@red, Y = 1, FUN = function(x,Y) supres(x))
supres(owlet@red[1,1])
## high resolution matrix for red channel
owletsupr <- kronecker(X = owlet@red, Y = diag(c(1,1)), FUN = function(x,Y) supres(x))
supres <- function(x){
y <- X.gen(x, 16, 0.4)
y1 <- ifelse(y < 0, 0, y)
y2 <- ifelse(y1 > 1, 1, y1)
return(matrix(y2, nrow = 4))
}
supres(owlet@red[1,1])
## high resolution matrix for red channel
owletsupr <- kronecker(X = owlet@red, dim = c(1,2), FUN = supres)
## high resolution matrix for red channel
owletsupr <- apply(X = owlet@red, dim = c(1,2), FUN = supres)
## high resolution matrix for red channel
owletsupr <- apply(X = owlet@red, MARGIN = c(1,2), FUN = supres)
str(owletsupr)
dim(owletsupr)
owletsupr[,1,1]
## high resolution matrix for red channel
size.low <- owlet@size
size.low
nrow(owlet@red)
owletsupr1 <- array(dim = c(4,4)*size.low)
dim(owletsupr1)
dim(owletsupr)
for(i in 1:size.low[1]){
for(j in 1:size.low[2]){
for(k in 1:4){
for(l in 1:4){
owletsupr1[4*(i - 1) + k, 4*(j-1) + l] <- owletsupr[4*(k-1) + l, i, j]
}
}
}
}
plot(pixmapGrey(owletsupr1))
str(owletsupr1)
### green channel
owletsupg <- apply(X = owlet@green, MARGIN = c(1,2), FUN = supres)
owletsupg1 <- array(dim = c(4,4)*size.low)
for(i in 1:size.low[1]){
for(j in 1:size.low[2]){
for(k in 1:4){
for(l in 1:4){
owletsupg1[4*(i - 1) + k, 4*(j-1) + l] <- owletsupg[4*(k-1) + l, i, j]
}
}
}
}
### blue channel
owletsupb <- apply(X = owlet@blue, MARGIN = c(1,2), FUN = supres)
owletsupb1 <- array(dim = c(4,4)*size.low)
for(i in 1:size.low[1]){
for(j in 1:size.low[2]){
for(k in 1:4){
for(l in 1:4){
owletsupb1[4*(i - 1) + k, 4*(j-1) + l] <- owletsupb[4*(k-1) + l, i, j]
}
}
}
}
owlet.high <- array(dim  = c(owlet@size*c(4,4), 3))
owlet.high[,,1] <- owletsupr1
owlet.high[,,2] <- owletsupg1
owlet.high[,,3] <- owletsupb1
owlet.highres <- pixmapRGB(owlet.high)
str(owlet.highres)
plot(owlet.highres)
writeTiff(owlet.highres, fn = "./owlet_high.tiff")
write.pnm(owlet.highres, file = "./owlet_high.pnm")
plot(owlet)
## v.
### display the high resolution image, save
par(mar=c(0,0,0,0))
plot(owlet)
## v.
### display the high resolution image, save
par(mar=c(0,0,0,0))
plot(owlet.highres)
x <- seq(0.1, 0.9, 0.01)
y <- asinh(x)
ploy(x, y)
plot(x, y)
x <- seq(-0.9, 0.9, 0.01)
y <- asinh(x)
plot(x, y)
x <- seq(-10, 10, 0.1)
y <- asinh(x)
plot(x, y)
library(danish)
library(SMPracticals)
installed.packages("SMPracticals")
install.package("SMPracticals")
install.packages("SMPracticals")
# 2.
## 2 (b) i.
library(SMPracticals)
danish
summary(danish)
hist(danish)
?hist
hear(danish)
head(danish)
str(danish)
ord <- order(danish)
danish1 <- danish[ord]
danish1[1]
danish1[length(danish1)]
danish1[length(danish1)-1]
danish1[length(danish1)-3]
danish1[length(danish1)-4]
danish1[length(danish1)-10]
?boxplot
boxplot(danish)
ord <- order(decreasing = T, danish)
danish1 <- danish[ord][-c(1,2,3)]
boxplot(danish1)
hist(danish1)
danish1 <- danish[!danish %in% boxplot.stats(danish)$out]
boxplot(danish1)
hist(danish1)
length(danish1)
length(danish)
hist(danish, main = "")
hist(danish1, main = "", xlab = "danish")
g <- function(x, theta){
if(theta == 0)
return(x)
else
return(asinh(theta*x)/theta)
}
pi
ell <- function(x, theta){
n <- length(x)
y <- g(x, theta)
muhat <- sum(y)/n
sigmahat2 <- sum((y - muhat)^2)/n
return(-(n/2)*log(2*pi* sigmahat2) - (n/2) - sum(log(1 + theta^2 * x^2))/2)
}
### find maxmized log likelihood for each theta and plot the curve
thetas <- seq(0, 4, 0.1)
?apply
ells <- apply(thetas, 1, ell, x = danish)
?tapply
ells <- tapply(thetas, ell, x = danish)
?vapply
ells <- sapply(thetas, ell, x = danish)
plot(lines(x = thetas, y = ells))
plot(x = thetas, y = ells)
?line
plot(line(x = thetas, y = ells))
?lines
lines(x = thetas, y = ells)
lines(x = thetas, y = ells, xlab = "theta", ylab = "maximized logLik")
plot(x = thetas, y = ells, 'n')
lines(x = thetas, y = ells, xlab = "theta", ylab = "maximized logLik")
plot(x = thetas, y = ells, 'n',xlab = "theta", ylab = "maximized logLik")
lines(x = thetas, y = ells)
### transform the data with theta = 3
transformed_danish <- g(danish, 3)
hist(transformed_danish)
hist(transformed_danish, main = "")
### transform the data with theta = 3
transformed_danish <- g(danish, 4)
hist(transformed_danish, main = "")
### transform the data with theta = 3
transformed_danish <- g(danish, 3)
hist(transformed_danish, main = "")
qqplot(transformed_danish)
qqnorm(transformed_danish)
### transform the data with theta = 3
transformed_danish <- g(danish, 4)
hist(transformed_danish, main = "")
qqnorm(transformed_danish)
### transform the data with theta = 3
transformed_danish <- g(danish, 3)
hist(transformed_danish, main = "")
qqnorm(transformed_danish)
qqnorm(transformed_danish, main = "")
?abline
abline(0, 1)
qqnorm(transformed_danish, main = "")
thetas <- seq(0, 4, 0.1)
ells <- sapply(thetas, ell, x = danish1)
plot(x = thetas, y = ells, 'n',xlab = "theta", ylab = "maximized logLik")
lines(x = thetas, y = ells)
### transform the data with theta = 3
transformed_danish <- g(danish1, 3)
hist(transformed_danish, main = "")
qqnorm(transformed_danish, main = "")
### transform the data with theta = 3
transformed_danish <- g(danish1, 4)
hist(transformed_danish, main = "")
qqnorm(transformed_danish, main = "")
shapiro.test(transformed_danish)
### find maxmized log likelihood for each theta and plot the curve
thetas <- seq(0, 10, 0.1)
ells <- sapply(thetas, ell, x = danish)
plot(x = thetas, y = ells, 'n',xlab = "theta", ylab = "maximized logLik")
lines(x = thetas, y = ells)
### plot between theta from 3 to 4
thetas1 <- thetas[thetas >= 3]
ells1 <- ells[thetas >= 3]
plot(x = thetas1, y = ells1, 'n',xlab = "theta", ylab = "maximized logLik")
lines(x = thetas1, y = ells1)
### find maxmized log likelihood for each theta and plot the curve
thetas <- seq(0, 4, 0.1)
ells <- sapply(thetas, ell, x = danish)
plot(x = thetas, y = ells, 'n',xlab = "theta", ylab = "maximized logLik")
lines(x = thetas, y = ells)
### plot between theta from 3 to 4
thetas1 <- thetas[thetas >= 3]
ells1 <- ells[thetas >= 3]
plot(x = thetas1, y = ells1, 'n',xlab = "theta", ylab = "maximized logLik")
lines(x = thetas1, y = ells1)
### transform the data with theta = 3
transformed_danish <- g(danish, 4)
hist(transformed_danish, main = "")
qqnorm(transformed_danish, main = "")
shapiro.test(transformed_danish)
