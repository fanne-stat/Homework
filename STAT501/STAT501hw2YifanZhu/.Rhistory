cat("\n", "  Results for fitting the Negative Binomial distribution", "\n")
cat("\n", "Category Bounds   Count   Expected", "\n")
print(new3)
cat("\n", "         Pearson test = ", x2p)
cat("\n", "   Degrees of freedom = ", dfp)
cat("\n", "              p-value = ", pvalp)
cat("\n", "Likelihood ratio test = ", g2)
cat("\n", "                   df = ", dfp)
cat("\n", "              p-value = " , pvalg)
source('C:/Users/fanne/Dropbox/Homework/STAT557/STAT557hw2YifanZhu/negbin(2).R')
source('C:/Users/fanne/Dropbox/Homework/STAT557/STAT557hw2YifanZhu/negbin(2).R', echo=TRUE)
source('C:/Users/fanne/Dropbox/Homework/STAT557/STAT557hw2YifanZhu/negbin(2).R')
?cumprod
source('C:/Users/fanne/Dropbox/Homework/STAT557/STAT557hw2YifanZhu/rainevents.R')
comb
source('C:/Users/fanne/Dropbox/Homework/STAT557/STAT557hw2YifanZhu/rainevents.R')
source('C:/Users/fanne/Dropbox/Homework/STAT557/STAT557hw2YifanZhu/negbin(2).R')
pi
pi <- nbr$b[1]
beta <- nbr$b[2]
invI <- nbr$hi
invI
mhat
mhat <- beta*(1-pi)/pi
mhat
D <- c(-beta/pi^2, (1-pi)/pi)
t(D)%*%invI%*%D
sqrt(0.03306799)
sigama <- sqrt(0.03306799)
mhat - 1.96*sigma
mhat - 1.96*sigama
mhat +1.96*sigama
log(2.93)+1.96*sqrt(1/67 + 1/34 + 1/43 + 1/64)
log(2.93) - 1.96*sqrt(1/67 + 1/34 + 1/43 + 1/64)
exp(0.509591)
exp(1.640414)
fisher.test(matrix(c(21,2,15,3),ncol=2, byrow=T))
library(vcd)
install.packages("vcd")
library(vcd)
x <- matrix(c(48, 26, 22, 8, 2, 4,
6, 4), nrow = 2, byrow=T)
assocstats(x)
assocstats(t(x))
xm<- matrix(c(113, 163, 370, 45, 106, 280,229, 343, 568), nrow = 3, byrow=T)
assocstats(xf)
xf<- matrix(c(100, 109, 202, 33, 89, 179,100, 179, 542), nrow = 3, byrow=T)
assocstats(xf)
assocstats(xm)
?fisher.test
fisher.test
x
fisher.test(x, simulate.p.value = T, B = 50000)
assocstats(xf)
assocstats(xm)
x
fisher.test(x)
Gamma2.f<-function(x, pr=0.95)
{
# x is a matrix of counts. You can use output of xtabs in R.
# Confidence interval calculation and output from Greg Rodd
# Check for using S-PLUS and output is from crosstabs (needs >= S-PLUS 6.0)
if(is.null(version$language) && inherits(x, "crosstabs")) { oldClass(x)<-NULL;
attr(x, "marginals")<-NULL}
n <- nrow(x)
m <- ncol(x)
pi.c<-pi.d<-matrix(0,nr=n,nc=m)
row.x<-row(x)
col.x<-col(x)
for(i in 1:(n)){
for(j in 1:(m)){
pi.c[i, j]<-sum(x[row.x<i & col.x<j]) + sum(x[row.x>i & col.x>j])
pi.d[i, j]<-sum(x[row.x<i & col.x>j]) + sum(x[row.x>i & col.x<j])}}
C <- sum(pi.c*x)/2
D <- sum(pi.d*x)/2
psi<-2*(D*pi.c-C*pi.d)/(C+D)^2
sigma2<-sum(x*psi^2)-sum(x*psi)^2
gamma <- (C - D)/(C + D)
pr2 <- 1 - (1 - pr)/2
CIa <- qnorm(pr2) * sqrt(sigma2) * c(-1, 1) + gamma
list(gamma = gamma, C = C, D = D, sigma = sqrt(sigma2), Level = paste(
100 * pr, "%", sep = ""), CI = paste(c("[", max(CIa[1], -1),
", ", min(CIa[2], 1), "]"), collapse = ""))
}
Gamma2.f(xf)
Gamma2.f(xm)
xb <- matrix(c(10, 5, 10, 31, 10, 4,
22, 18, 9), 3, 3, byrow=T)
xw <- matrix(c(9, 10, 5, 26, 6, 13,
10, 17, 10), 3, 3, byrow=T)
#   This file contains R code for computing a
#   Kappa statistic, or weighted Kappa statistic,
#   standard errors and confidence intervals.
#   It is applied to the student teacher data.
#   The file is posted as  kappa.R
# First create a function to compute kappa
kappa.f <- function(x, w=NULL)
{
#  Compute expected counts for random agreement
n <- sum(x)
xr <- apply(x, 1, sum)
xc <- apply(x, 2, sum)
one <- rep(1, length(xr))
e <- outer(xr, xc)/n
#  Compute the unweighted Kappa
k1 <- sum(diag(x))/n
k2 <- sum(diag(e))/n
k3 <- sum(diag(x)*diag(xr+xc))/(n*n)
k4 <- sum(((outer(xc, one)+
outer(one, xr))**2)*x)/(n**3)
kappa <- (k1-k2)/(1-k2)
#  Compute standard errors:
#     s1 does not assume random agreement
#     s2 assumes only random agreement
s11 <- (k1*(1-k1)/((1-k2)**2)+2*(1-k1)*
(2*k1*k2-k3)/((1-k2)**3)+
((1-k1)**2)*(k4-4*k2*k2)/((1-k2)**4))/n
s1 <- s11**.5
s22 <- (k2+k2*k2-(sum(diag(e)*diag(xr+xc))
/(n**2)))/(n*(1-k2)**2)
s2 <- s22**.5
# Compute default weights if no weights are provided
k <- dim(x)[2]
if (is.null(w)) {
w <- matrix(0, ncol = k, nrow = k)
for (i in 1:k) {
for (j in 1:k) {
w[i, j] <- 1 - (abs(i - j))^2/(k-1)^2
}
}
}
#  Compute the weighted Kappa
xw <- x*w
ew <- e*w
wr <- apply(w*xc, 2, sum)/n
wc <- apply(w*xr, 2, sum)/n
kw1 <- sum(xw)/n
kw2 <- sum(ew)/n
tt2 <- outer(wr, one)+outer(one, wc)
tt3 <- ((w*(1-kw2))-(tt2*(1-kw1)))**2
kappaw <- (kw1-kw2)/(1-kw2)
#  Compute standard errors:
#     sw11 does not assume random agreement
#     sw22  assumes only random agreement
sw11 <- sum(x*tt3)/n
sw11 <- (sw11-(kw1*kw2-2*kw2+kw1)**2)/
(n*(1-kw2)**4)
sw1 <- sw11**.5
sw22 <- (w-tt2)**2
sw22 <- ((sum(e*sw22)/n)-(kw2**2))/
(n*(1-kw2)**2)
sw2 <- sw22**.5
#  Construct 95% confidence intervals
#  and tests for random agreement
tk <- kappa/s2
tkw <- kappaw/sw2
tt4 <- tk**2
pk <- (1-pchisq(tt4, 1))
tt4 <- tkw**2
pkw <-(1-pchisq(tt4, 1))
ckl <- kappa-(1.96)*s1
cku <- kappa+(1.96)*s1
ckwl <- kappaw-(1.96)*sw1
ckwu <- kappaw+(1.96)*sw1
ww <- matrix( w, ncol=k, nrow=k)
#print results
cat("\n", "       Unweighted Kappa = ", signif(kappa,5))
cat("\n", "         Standard error = ", signif(s1,5))
cat("\n", "95% confidence interval:  ", signif(ckl,5), signif(cku,5))
cat("\n", "p-value for test of random agreement = ", signif(pk,5), "\n", "\n")
cat("\n", "         Weighted Kappa = ", signif(kappaw,5))
cat("\n", "         Standard error = ", signif(sw1,5))
cat("\n", "95% confidence interval:  ", signif(ckwl,5), signif(ckwu,5))
cat("\n", "p-value for test of random agreement = ", signif(pkw,5),"\n")
}
kappa.f(xw)
kappa.f(xb)
source('C:/Users/fanne/Dropbox/Homework/STAT557/STAT557hw2YifanZhu/kappaboot.R')
results
boot.ci(results, type="all", index=1)
?boot.ci
source('C:/Users/fanne/Dropbox/Homework/STAT557/STAT557hw2YifanZhu/kappaboot.R')
boot.ci(results, type="all", index=1)
0.061583^2 +  0.054328^2
-0.12456 - (-0.073792)
-0.050768 - 1.96 *0.006743997
-0.050768 + 1.96 *0.006743997
x.array <- array(c(81, 34, 24, 71, 118, 74, 69, 105, 82, 63, 52, 93),c(2,2,3))
mantelhaen.test(x.array, conf.level=0.95)
?mantelhaen.test
library(DescTools)
install.packages("DescTools")
library(DescTools)
BreslowDayTest(x.array)
mantelhaen.test(x.array, conf.level=0.95, exact = T)
?Zelen
??zelen
install.packages("NSM3")
library(NSM3)
zelen.test(x.array)
?zelen.test
zelen.test(example = T)
zelen.test(x.array, 5)
zelen.test(x.array, r = 5)
install.packages("VGAM")
M <- c(500, 1000*1:10, 20000, 50000, 100000, 200000)
M
?boot
library(boot)
?boot
aircondit
d <- data.frame(n = 10, lambda = 5, method1 = c(1,2,3))
d
?row.names
row.names(d) <- c("m1, m2, m3")
row.names(d) <- c("", m1, m2, m3")
)
row.names(d)
row.names(d) <- c("m1", "m2", "m3")
d
rm(d)
iris
library(readxl)
senators<-read_xls("senate_voting_data.xls")
source('C:/Users/fanne/Dropbox/Homework/STAT501/STAT501hw1YifanZhu/HW1.R', echo=TRUE)
rm(list = ls())
setwd("c:/Users/fanne/Dropbox/Homework/STAT501/STAT501hw1YifanZhu/")
library(readxl)
senators<-read_xls("senate_voting_data.xls")
head(senators)
View(senators)
names(senators)
names(senators)[1]
senators.names[1]
senators.names<-names(senators)
senators.names[1]
senators.names<-names(senators)[-1]
senators.names[1]
senators.names[2]
senators.names<-names(senators)[-c(1,2)]
head(senators.names)
rev.party.state.names<-lapply(X=strsplit(gsub(pattern="[.]",replacement="",x=senators.names),split=" "),FUN = rev)
senators.party <- lapply(X = rev.party.state.names, FUN = function(x)(unlist(x)[1]))
senators.last.names <- lapply(X = rev.party.state.names, FUN = function(x)(unlist(x)[4]))
senators[,-c(1,2)]
senators[,-c(1,2)][1,]
senators[,-c(1,2)][,1]
senators_new <- t(senators[,-c(1,2)])
str(senators_new)
senators_new <- as.data.frame(t(senators[,-c(1,2)]))
senator_new <- data.frame(senator_new, party = senators.party)
senators_new <- data.frame(senators_new, party = senators.party)
head(senators_new)
senators_new <- as.data.frame(t(senators[,-c(1,2)]))
iris
colnames(senators) <- NULL
head(senators_new_
head(senators_new)
head(senators_new)
View(senators_new)
colnames(senators) <- NULL
colnames(senators_new) <- NULL
colnames(senators_new)
head(senators_new)
rownames(senators_new) <- senators.last.names
rownames(senators_new)
senators.last.names
as.vector(senators.last.names)
senators.party
unlist(senators.last.names)
senators.last.names <- unlist(senators.last.names)
senators.party <- unlist(senators.party)
rownames(senators_new) <- senators.last.names
rownames(senators_new) <- NULL
senators_new <- data.frame(senators_new, party = senators.party)
?andrews
andrews(senators_new, clr = 543)
?andrews
andrews(senators_new, clr = 543)
andrews(senators_new, clr = 543, ymax = 50)
dim(iris)[2]
dim(senators_new)[2]
iris[,5]
senators_new[,543]
source("ggandrews.R")
ggandrews(senators_new, clr = 543)
ggandrews(senators_new, clr = 543, linecol = c("blue", "purple", "red"))
ggandrews(senators_new, type = 2, clr = 543, linecol = c("blue", "purple", "red"))
ggandrews(senators_new, type = 2, clr = 543, linecol = c("blue", "purple", "red")) + guide_legend(title="Party")
#Problem 2
install.packages("lattice")
#a) Radial visualization
sclerosis <- read.table("sclerosis.dat", header=F)
dim(sclerosis)
sclerosis[,p]
sclerosis[,6]
class(sclerosis[,6])
source("radviz2d.R")
p <- dim(sclerosis)[2]
p
sclerosis[, p] <- as.factor(sclerosis[,p])
sclerosis[,p]
radviz2d(dataset = sclerosis, name = "Sclerosis")
#Problem 2
install.packages("lattice")
install.packages("lattice")
library(lattice)
radviz2d(dataset = sclerosis, name = "Sclerosis")
?mnorm
?mmnorm
library(dprep)
install.packages("dprep")
library(dprep)
mmnorm
radviz2d(dataset = sclerosis, name = "Sclerosis")
sclerosis[, p] <- ifelse(sclerosis[,p] == 0, "normal", "sclerosis")
sclerosis[,p]
sclerosis[, p] <- as.factor(ifelse(sclerosis[,p] == 0, "normal", "sclerosis"))
sclerosis[,p]
sclerosis[, p] <- factor(ifelse(sclerosis[,p] == 0, "normal", "sclerosis"))
sclerosis[, p] <- factor(ifelse(sclerosis[,p] == 0, "normal", "sclerosis"))
sclerosis[, p] <- factor(ifelse(sclerosis[,p] == 0, "normal", "sclerosis"))
sclerosis[,p]
sclerosis[, p] <- ifelse(sclerosis[,p] == 0, "normal", "sclerosis")
sclerosis[,p]
#a) Radial visualization
sclerosis <- read.table("sclerosis.dat", header=F)
p <- dim(sclerosis)[2]
sclerosis[, p] <- ifelse(sclerosis[,p] == 0, "normal", "sclerosis")
sclerosis[,p]
#a) Radial visualization
sclerosis <- read.table("sclerosis.dat", header=F)
p <- dim(sclerosis)[2]
sclerosis[, p] <- as.factor(ifelse(sclerosis[,p] == 0, "normal", "sclerosis"))
sclerosis[,p]
colnames(sclerosis) <- c("Age", "TS1", "DS1", "TS2", "DS2")
radviz2d(dataset = sclerosis, name = "Sclerosis")
source("starcoord.R")
starcoord(data = sclerosis, class = TRUE)
head(sclerosis)
colnames(sclerosis) <- c("Age", "TS1", "DS1", "TS2", "DS2", "Disease")
head(sclerosis)
levels(factor(sclerosis[,p]))
legnames <- levels(factor(sclerosis[,p]))
legnames <- paste("Class ",legnames)
legnames
sclerosis
starcoord(data = sclerosis, class = TRUE)
#b) Calculate the mean
mean1<-colMeans(sclerosis[sclerosis[,p]=="normal", -p])
mean1
#b) Calculate the mean
mean1<-colMeans(sclerosis[sclerosis[,p]=="normal",])
#b) Calculate the mean
mean1<-colMeans(sclerosis[sclerosis[,p]=="normal", -p])
mean
mean1
mean2<-colMeans(sclerosis[sclerosis[,p]=="sclerosis", -p])
means
mean2
?stars
sclerosis_mean <- rbind(mean1, mean2)
sclerosis_mean
rm(sclerosis_mean)
mean1
sclerosis_mean<-colMeans(sclerosis[sclerosis[,p]=="sclerosis", -p])
sclerosis_mean_data <- rbind(normal_mean, sclerosis_mean)
sclerosis_mean<-colMeans(sclerosis[sclerosis[,p]=="sclerosis", -p])
sclerosis_mean
sclerosis_mean_data <- rbind(normal_mean, sclerosis_mean)
#b) Calculate the mean
normal_mean<-colMeans(sclerosis[sclerosis[,p]=="normal", -p])
normal_mean
sclerosis_mean_data <- rbind(normal_mean, sclerosis_mean)
str(sclerosis_mean_data)
sclerosis_mean_data <- as.data.frame(rbind(normal_mean, sclerosis_mean))
str(sclerosis_mean_data)
stars(x = sclerosis_mean_data, label = c("normal", "sclerosis"))
par(mfrow = c(1, 1))
stars(x = sclerosis_mean_data, label = c("normal", "sclerosis"))
?stars
?mfrow
??mfrow
par(mfrow = c(1, 2))
stars(utilities[,-9], labels = as.character(utilities[,9]))
par(mfrow = c(1, 2))
stars(x = sclerosis_mean_data, label = c("normal", "sclerosis"))
sclerosis_mean_data
stars(x = sclerosis_mean_data)
stars(x = sclerosis_mean_data)
stars(x = sclerosis_mean_data, labels=c("normal", "sclerosis"))
?stars
stars(x = sclerosis_mean_data[1,])
sclerosis_mean_data[1,]
sclerosis_mean_data <- as.matrix(rbind(normal_mean, sclerosis_mean))
stars(x = sclerosis_mean_data)
stars(x = sclerosis_mean_data[1,])
str(sclerosis_mean_data[1,])
stars(x = sclerosis_mean_data)
stars(x = sclerosis[,-p], labels = sclerosis[,p])
stars(x = sclerosis[,-p], labels = as.character(sclerosis[,p]))
?stars
sclerosis_mean_data
#c) Display the means
stars(x = sclerosis_mean_data)
library(ggiraph)
#c) Display the means
install.packages("TeachingDemos")
library(TeachingDemos)
faces(sclerosis_mean_data, labels = c("normal", "sclerosis"))
#d) plotcorr
source("plotcorr.R")
plot.corr(xx = sclerosis[sclerosis[,p]=="normal", -p])
plot.corr(xx = sclerosis[sclerosis[,p]=="sclerosis", -p])
par(mfrow = c(1,2))
plot.corr(xx = sclerosis[sclerosis[,p]=="normal", -p])
plot.corr(xx = sclerosis[sclerosis[,p]=="sclerosis", -p])
?par
par(mfrow = c(1,2), sub = c("normal", "sclerosis"))
par(mfrow = c(1,2))
plot.corr(xx = sclerosis[sclerosis[,p]=="normal", -p], main = "normal")
plot.corr(xx = sclerosis[sclerosis[,p]=="sclerosis", -p], main = "sclerosis")
#d) plotcorr
source("plotcorr.R")
plot.corr(xx = sclerosis[sclerosis[,p]=="normal", -p], main = "normal")
plot.corr(xx = sclerosis[sclerosis[,p]=="sclerosis", -p], main = "sclerosis")
?title
par(mfrow = c(1,2))
plot.corr(xx = sclerosis[sclerosis[,p]=="normal", -p],sub = "normal")
plot.corr(xx = sclerosis[sclerosis[,p]=="sclerosis", -p],sub = "sclerosis")
title(sub = c("normal", "sclerosis"))
par(mfrow = c(1,2))
plot.corr(xx = sclerosis[sclerosis[,p]=="normal", -p])
title(sub = "normal")
plot.corr(xx = sclerosis[sclerosis[,p]=="sclerosis", -p])
title(sub = "sclerosis")
#a)
#Read the dataset
Tornado<-read.table(file ="https://www.nssl.noaa.gov//users/brooks//public_html//feda//datasets//tornf1p.txt",col.names = c("year","jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec"))
source("plotcorr.R")
#Create correlation plot
plot.corr(Tornado[2:13])
#b) i.
#Create 3 group and a column of group in the dataframe
Tornado$Period<-cut(x = Tornado$year,breaks=c(1954,1974,1994,2014),labels = c("I","II","III"),include.lowest = F)
#Create parallel plot with colour by the group
library(GGally)
parcoordplot(xx =Tornado[-1,2:13],cl = as.factor(Tornado$Period[-1]),FUN=mean,alpha = 0.2)
source("parcoordplot.R")
parcoordplot(xx =Tornado[-1,2:13],cl = as.factor(Tornado$Period[-1]),FUN=mean,alpha = 0.2)
for (i in 1:12){
surveyplot(cbind(Tornado[,2:13],as.numeric(as.factor(Tornado[,14]))),order = i)}
surveyplot()
surveyplot
# c) Create the star and chernoff plot for the mean of three group
library(TeachingDemos)
# Compute the mean for three groups
Means<-aggregate(x = Tornado[-1,2:13],by=list(Tornado$Period[-1]),FUN = mean)
#Create chernoff face for the means
faces(xy = Means[,2:13])
#Create stars for the group means
stars(x = Means[,2:13],labels = as.character(Means$Group.1),scale = T,full = T,radius = T)
(.packages())
combinations
?combinations
??combinations
#a) Read the dataset
library(readxl)
senators<-read_xls("senate_voting_data.xls")
senators.names<-names(senators)[-c(1,2)]
rev.party.state.names<-lapply(X=strsplit(gsub(pattern="[.]",replacement="",x=senators.names),split=" "),FUN = rev)
senators.party <- lapply(X = rev.party.state.names, FUN = function(x)(unlist(x)[1]))
senators.party <- unlist(senators.party)
senators.last.names <- lapply(X = rev.party.state.names, FUN = function(x)(unlist(x)[4]))
senators.last.names <- unlist(senators.last.names)
#Create new data.frame for plotting
senators_new <- as.data.frame(t(senators[,-c(1,2)]))
colnames(senators_new) <- NULL
rownames(senators_new) <- NULL
senators_new <- data.frame(senators_new, party = senators.party)
# Use the codes from Canvas
source("ggandrews.R")
# Display the Andrews' curves
ggandrews(senators_new, type = 2, clr = 543, linecol = c("blue", "purple", "red"))
##Problem 2
library(lattice)
require(dprep)
#a) Radial visualization
sclerosis <- read.table("sclerosis.dat", header=F)
p <- dim(sclerosis)[2]
sclerosis[, p] <- as.factor(ifelse(sclerosis[,p] == 0, "normal", "sclerosis"))
colnames(sclerosis) <- c("Age", "TS1", "DS1", "TS2", "DS2", "Disease")
# Use codes from Canvas
source("radviz2d.R")
# Display the radial visualization plot
radviz2d(dataset = sclerosis, name = "Sclerosis")
# Use the codes from Canvas
source("starcoord.R")
#Display the star coordinates
starcoord(data = sclerosis, class = TRUE)
#b) Calculate the mean
normal_mean<-colMeans(sclerosis[sclerosis[,p]=="normal", -p])
normal_mean
sclerosis_mean<-colMeans(sclerosis[sclerosis[,p]=="sclerosis",-p])
sclerosis_mean
sclerosis_mean_data <- as.matrix(rbind(normal_mean, sclerosis_mean))
# Display the Chernoff faces
faces(sclerosis_mean_data, labels = c("normal", "sclerosis"))
# normal
plot.corr(xx = sclerosis[sclerosis[,p]=="normal", -p])
# sclerosis
plot.corr(xx = sclerosis[sclerosis[,p]=="sclerosis", -p])
