y1 <- c(14, 9 , 10, 5, 18, 9, 9)
y2 <- c(17, 10, 17, 18, 13, 17, 16)
length(y1) - length(y2)
y1d <- mean(y1)
y2d <- mean(y2)
log(exp(3))
sum(y1 * log(y1d) - y1d - log(fractorial(y1)))
sum(y1 * log(y1d) - y1d - log(factorial(y1)))
s1 <- sum(y1 * log(y1d) - y1d - log(factorial(y1)))
s2 <- sum(y2 * log(y2d) - y2d - log(factorial(y2)))
s2
s1 + s2
2 * log(14)
2 * log(14) - s1 - s2
y <- c(y1, y2)
y
ydd <- mean(y)
sum(y * log(ydd) - ydd - log(factorial(y)))
log(factorial(y))
- 2 (s1 + s2) + 4
- 2 * (s1 + s2) + 4
- 2 * (s1 + s2) + 2 * log(14)
s <- sum(y * log(ydd) - ydd - log(factorial(y)))
-2 * s + 4
-2 * s + 2
-2 * s + log(14)
2*(s - (s1 + s2))
2*((s1 + s2) - s)
1 - pchisq(6.389118, df = 1)
?pchisq
7(y1d - y2d)^2/(y1d + y2d)
7*(y1d - y2d)^2/(y1d + y2d)
1 - pchisq(6.351648, df = 2)
x <- c(-13.87, -2.53, -2.44, -2.40, -1.75, -1.34, -1.05, -0.23, -0.07, 0.27, 1.77, 2.76, 3.29, 3.47, 3.71, 3.80, 4.24, 4.53, 43.21, 56.75)
l <- function(theta){
return(- n * log(pi) - sum(log(1 + (theta - x)^2)))
}
l(c(0,1))
n <- length(x)
l(c(0,1))
l(0)
theta <- seq(-100, 100, 0.2)
ltheta <- sapply(theta, l)
plot(x = theta, y = ltheta)
plot(x = theta, y = ltheta, 'l')
library(ggplot2)
qploy(x = theta, y = ltheta, geom = "line")
qplot(x = theta, y = ltheta, geom = "line")
qplot(x = theta, y = ltheta, geom = "line", xlab(expression(theta)), ylab(expression(ell(theta))))
qplot(x = theta, y = ltheta, geom = "line", xlab(expression(theta)), ylab(expression(l(theta))))
return(-2 * sum((theta - x)/(1 + (theta - x)^2)))
x
x <- c(-13.87, -2.53, -2.44, -2.40, -1.75, -1.34, -1.05, -0.23, -0.07, 0.27, 1.77, 2.76, 3.29, 3.47, 3.71, 3.80, 4.24, 4.53, 43.21, 56.75)
dltheta <- function(theta){
x <- c(-13.87, -2.53, -2.44, -2.40, -1.75, -1.34, -1.05, -0.23, -0.07, 0.27, 1.77, 2.76, 3.29, 3.47, 3.71, 3.80, 4.24, 4.53, 43.21, 56.75)
return(-2 * sum((theta - x)/(1 + (theta - x)^2)))
}
dltheta <- function(theta){
x <- c(-13.87, -2.53, -2.44, -2.40, -1.75, -1.34, -1.05, -0.23, -0.07, 0.27, 1.77, 2.76, 3.29, 3.47, 3.71, 3.80, 4.24, 4.53, 43.21, 56.75)
return(-2 * sum((theta - x)/(1 + (theta - x)^2)))
}
qplot(x = theta, y = sapply(theta, dltheta), geom = "line")
ddltheta <- function(theta){
x <- c(-13.87, -2.53, -2.44, -2.40, -1.75, -1.34, -1.05, -0.23, -0.07, 0.27, 1.77, 2.76, 3.29, 3.47, 3.71, 3.80, 4.24, 4.53, 43.21, 56.75)
return(-2 * sum((1 - (theta - x)^2)/(1 + (theta - x)^2)^2))
}
qplot(x = theta, y = sapply(theta, ddltheta), geom = "line")
library(ggplot2)
n <- length(x)
l <- function(theta){
x <- c(-13.87, -2.53, -2.44, -2.40, -1.75, -1.34, -1.05, -0.23, -0.07, 0.27, 1.77, 2.76, 3.29, 3.47, 3.71, 3.80, 4.24, 4.53, 43.21, 56.75)
return(- n * log(pi) - sum(log(1 + (theta - x)^2)))
}
theta <- seq(-100, 100, 0.2)
ltheta <- sapply(theta, l)
qplot(x = theta, y = ltheta, geom = "line")
?abs
Newton <- function(thetat){
thetat_new <- thetat - dltheta(thetat)/ddltheta(thetat)
while (abs(thetat_new - thetat/(thetat + 0.00005)) > 0.0001){
thetat <- thetat_new
thetat_new <- thetat - dltheta(thetat)/ddltheta(thetat)
}
return(thetat)
}
start <- c(−11, −1, 0, 1.4, 4.1, 4.8, 7, 8, 38)
start <- c(-11, -1, 0, 1.4, 4.1, 4.8, 7, 8, 38)
sapply(start, Newton)
Newton <- function(thetat){
browser()
thetat_new <- thetat - dltheta(thetat)/ddltheta(thetat)
while (abs(thetat_new - thetat/(thetat + 0.00005)) > 0.0001){
thetat <- thetat_new
thetat_new <- thetat - dltheta(thetat)/ddltheta(thetat)
}
return(thetat)
}
sapply(start, Newton)
Newton <- function(thetat){
thetat_new <- thetat - dltheta(thetat)/ddltheta(thetat)
while (abs(thetat_new - thetat/(thetat + 0.00005)) > 0.0001){
thetat <- thetat_new
thetat_new <- thetat - dltheta(thetat)/ddltheta(thetat)
}
return(thetat)
}
Newton <- function(thetat){
thetat_new <- thetat - dltheta(thetat)/ddltheta(thetat)
while (abs((thetat_new - thetat)/(thetat + 0.00005)) > 0.0001){
thetat <- thetat_new
thetat_new <- thetat - dltheta(thetat)/ddltheta(thetat)
}
return(thetat)
}
FisherS <- function(thetat){
x <- c(-13.87, -2.53, -2.44, -2.40, -1.75, -1.34, -1.05, -0.23, -0.07, 0.27, 1.77, 2.76, 3.29, 3.47, 3.71, 3.80, 4.24, 4.53, 43.21, 56.75)
I <- length(x)/2
thetat_new <- thetat + dltheta(thetat)/I
while (abs((thetat_new - thetat)/(thetat + 0.00005)) > 0.0001){
thetat <- thetat_new
thetat_new <- thetat + dltheta(thetat)/I
}
return(thetat)
}
sapply(start, Newton)
Newton <- function(thetat){
brower()
thetat_new <- thetat - dltheta(thetat)/ddltheta(thetat)
while (abs((thetat_new - thetat)/(thetat + 0.00005)) > 0.0001){
thetat <- thetat_new
thetat_new <- thetat - dltheta(thetat)/ddltheta(thetat)
}
return(thetat)
}
Newton(-11)
Newton <- function(thetat){
browser()
thetat_new <- thetat - dltheta(thetat)/ddltheta(thetat)
while (abs((thetat_new - thetat)/(thetat + 0.00005)) > 0.0001){
thetat <- thetat_new
thetat_new <- thetat - dltheta(thetat)/ddltheta(thetat)
}
return(thetat)
}
Newton(-11)
qplot(x = theta, y = ddltheta(theta), geom = "line")
qplot(x = theta, y = sapply(theta, ddltheta), geom = "line")
qplot(x = theta, y = sapply(theta, dltheta), geom = "line")
Newton(-1)
Newton(0)
Newton(1.4)
qplot(x = seq(-12, 12, 0.1), y = sapply(seq(-12, 12, 0.1), dltheta), geom = "line")
qplot(x = seq(-12, 12, 0.1), y = sapply(seq(-12, 12, 0.1), ddltheta), geom = "line")
ddltheta(1.713569)
ddltheta(-0.1922825)
dltheta(-0.1922825)
qplot(x = seq(-12, 12, 0.1), y = sapply(seq(-12, 12, 0.1), dltheta), geom = "line")
optimize(dltheta, interval = c(-12,2))
qplot(x = seq(-12, 12, 0.1), y = sapply(seq(-12, 12, 0.1), dltheta), geom = "line")
qplot(x = theta, y = sapply(theta, dltheta), geom = "line")
qplot(x = seq(-12, 12, 0.1), y = sapply(seq(-12, 12, 0.1), dltheta), geom = "line")
Newton(4.1)
Newton(4.8)
dltheta(4.8)/ddltheta(4.8)
qplot(x = seq(-12, 12, 0.1), y = sapply(seq(-12, 12, 0.1), dltheta), geom = "line")
?sole
?solve
?root
uniroot(dltheta, c(-12, 2))
uniroot(dltheta, c(-12, -1))
uniroot(dltheta, c(-12, 1))
uniroot(dltheta, c(1,2))
Newton(4.8)
Newton <- function(thetat){
thetat_new <- thetat - dltheta(thetat)/ddltheta(thetat)
while (abs((thetat_new - thetat)/(thetat + 0.00005)) > 0.0001){
thetat <- thetat_new
thetat_new <- thetat - dltheta(thetat)/ddltheta(thetat)
}
return(thetat)
}
Newton(4.8)
Newton(7)
Newton(8)
Newton(38)
qplot(x = theta, y = sapply(theta, dltheta), geom = "line")
FisherS(-4.8)
FisherS(-11)
FisherS(-1)
FisherS(0)
FisherS(1.4)
FisherS(4.1)
FisherS(4.8)
FisherS(47)
FisherS(7)
FisherS(8)
FisherS(38)
Newton(Fisher(38))
Newton(FisherS(38))
for (thetat in start){
thetahat <- Newton(thetat)
print(thetahat)
}
for (thetat in start){
thetahat <- FisherS(thetat)
thetahat <- Newton(thetahat)
print(thetahat)
}
Newton <- function(thetat){
thetat_new <- thetat - dltheta(thetat)/ddltheta(thetat)
condition <- (abs((thetat_new - thetat)/(thetat + 0.00005)) > 0.0001)
while (condtion){
thetat <- thetat_new
thetat_new <- thetat - dltheta(thetat)/ddltheta(thetat)
condition <- (abs((thetat_new - thetat)/(thetat + 0.00005)) > 0.0001)
if (is.na(condition))
return("Not Converge")
}
return(thetat)
}
Newton(-11)
Newton <- function(thetat){
brower()
thetat_new <- thetat - dltheta(thetat)/ddltheta(thetat)
condition <- (abs((thetat_new - thetat)/(thetat + 0.00005)) > 0.0001)
while (condtion){
thetat <- thetat_new
thetat_new <- thetat - dltheta(thetat)/ddltheta(thetat)
condition <- (abs((thetat_new - thetat)/(thetat + 0.00005)) > 0.0001)
if (is.na(condition))
return("Not Converge")
}
return(thetat)
}
Newton(-11)
Newton <- function(thetat){
browser()
thetat_new <- thetat - dltheta(thetat)/ddltheta(thetat)
condition <- (abs((thetat_new - thetat)/(thetat + 0.00005)) > 0.0001)
while (condtion){
thetat <- thetat_new
thetat_new <- thetat - dltheta(thetat)/ddltheta(thetat)
condition <- (abs((thetat_new - thetat)/(thetat + 0.00005)) > 0.0001)
if (is.na(condition))
return("Not Converge")
}
return(thetat)
}
Newton(-11)
Newton <- function(thetat){
browser()
thetat_new <- thetat - dltheta(thetat)/ddltheta(thetat)
condition <- (abs((thetat_new - thetat)/(thetat + 0.00005)) > 0.0001)
while (condition){
thetat <- thetat_new
thetat_new <- thetat - dltheta(thetat)/ddltheta(thetat)
condition <- (abs((thetat_new - thetat)/(thetat + 0.00005)) > 0.0001)
if (is.na(condition))
return("Not Converge")
}
return(thetat)
}
Newton(-11)
Newton <- function(thetat){
thetat_new <- thetat - dltheta(thetat)/ddltheta(thetat)
condition <- (abs((thetat_new - thetat)/(thetat + 0.00005)) > 0.0001)
while (condition){
thetat <- thetat_new
thetat_new <- thetat - dltheta(thetat)/ddltheta(thetat)
condition <- (abs((thetat_new - thetat)/(thetat + 0.00005)) > 0.0001)
if (is.na(condition))
return("Not Converge")
}
return(thetat)
}
Newton(-11)
sapply(start, Newton)
for (thetat in start){
thetahat <- Newton(thetahat)
print(thetahat)
}
for (thetat in start){
thetahat <- Newton(theta)
print(thetahat)
}
for (thetat in start){
thetahat <- Newton(thetat)
print(thetahat)
}
m <- 5
n <- 3
mu <- 0
sigma <- 1
x <- rnorm(m, mu, sigma)
y <- rnorm(n, mu, sigma)
X <- x%*%t(y)
rank(X)
rankMatrix(X)
library(Matrix)
rankMatrix(X)
m <- 5
n <- 3
mu <- 4
sigma <- 1
x <- rnorm(m, mu, sigma)
y <- rnorm(n, mu, sigma)
X <- x%*%t(y)
rankMatrix(X)
rankMatrix(X, method = "qr.R")
var(X)
size(X)
length(X)
var(X[1:length(X)])
X[1:length(X)] + 1
X <- X[1:length(X)] + 1
X
z1 <- rnorm(1000)
z2 <- rnorm(1000)
var(z1*z2)
var(z1*z2,z1)
var(z1*z2,z2)
z1 <- rnorm(10000)
z2 <- rnorm(10000)
var(z1*z2)
var(z1*z2,z2)
var(X)
noise <- rnorm(length(X))
var(noise)
k <- sqrt(var(X)/(100*var(noise)))
noise <- k*noise
SNR <- sqrt(var(X)/var(noise))
?norm
norm
?norm
G <- diag(rep(2,3))
library(MASS)
G <- diag(rep(2,3))
Zt <- matrix(c(1,1,0,0,
0,0,1,0,
0,0,0,1), byrow = T, nrow = 3)
Sigma <- matrix(c(4,2,0,0,
2,4,0,0,
0,0,4,0,
0,0,0,4),byrow = T, nrow = 4)
Sigma_inv <- ginv(Sigma)
y <- c(51,54,48,52)
X <- matrix(c(1,0,
0,1,
1,0,
1,0),byrow = T, nrow = 4)
betahat <- ginv(t(X)%*%Sigma_inv%*%X)%*%t(X)%*%Sigma_inv%*%y
betahat
yhat <- X%*%betahat
y - yhat
G%*%Zt%*%Sigma_inv%*%(y - yhat)
betahat[2] - G%*%Zt%*%Sigma_inv%*%(y - yhat)
betahat[2] + G%*%Zt%*%Sigma_inv%*%(y - yhat)
require(svd)
install.packages("svd")
require(svd)
?propack.svd
install.packages("irlba")
require(irlba)
?irlba
coal
library(coal)
library(boot)
coal
hist(coal)
hist(x = coal)
head(coal)
hist(x = coal$date)
library(ggplot2)
p <- ggplot(data = coal, aes(x = data, y = ..density..)) + geom_line()
p
p <- ggplot(data = coal, aes(x = date, y = ..density..)) + geom_line()
p
p <- ggplot(data = coal, aes(x = date)) + geom_density()
p
install.packages("dprep")
install.packages("dprep")
require(dprep)
##Problem 1
#a) Radial visualization
library(lattice)
olive <- read.table("http://maitra.public.iastate.edu/stat501/datasets/olive.dat", header=T)
olive
colnames(olive) <- c("Regions", "CH1", "CH2", "CH3", "CH4", "CH5","CH6","CH7","CH8")
names(olive)
oil<- as.factor(olive$Regions)
# Use codes from Canvas
source("radviz2d.R")
setwd("~/Dropbox/Homework/STAT501/STAT501hw4YifanZhu")
# Use codes from Canvas
source("radviz2d.R")
# Display the radial visualization plot
radviz2d(dataset = cbind(olive[,-1], oil), name = "Regions")
# sub-regions R1
olive_R1 <- olive[olive$Regions %in% 1:4,]
radviz2d(dataset = cbind(olive_R1[,-1], as.factor(olive_R1$Regions)), name = "R1")
# sub-region  R2
olive_R2 <- olive[olive$Regions %in% 5:6,]
radviz2d(dataset = cbind(olive_R2[,-1], as.factor(olive_R2$Regions)), name = "R2")
# sub-region  R3
olive_R3 <- olive[olive$Regions %in% 7:9,]
radviz2d(dataset = cbind(olive_R3[,-1], as.factor(olive_R3$Regions)), name = "R3")
#b) Choose the R2
#i) Calculate the correlation matrix of the two sub-regions
cor(olive_R2[olive_R2$Regions == 5, -1])
cor(olive_R2[olive_R2$Regions == 6, -1])
source("plotcorr.R")
par(mfrow = c(1,2))
plot.corr(xx = olive_R2[olive_R2$Regions == 5, -1])
install.packages("corrplot")
plot.corr(xx = olive_R2[olive_R2$Regions == 5, -1])
plot.corr(xx = olive_R2[olive_R2$Regions == 6, -1])
#ii) Compare marginal standar deviations
require(ggplot2)
require(GGally)
require(RColorBrewer)
source("parcoordplot.R")
SD_5<-sapply(olive_R2[olive_R2$Regions == 5, -1], FUN = sd)
SD_6<-sapply(olive_R2[olive_R2$Regions == 6, -1], FUN = sd)
parcoordplot(xx =olive_R2[,-1] ,cl = as.factor(olive_R2$Regions),FUN=mean,alpha = 0.2)
install.packages("GGally")
source("parcoordplot.R")
parcoordplot(xx =olive_R2[,-1] ,cl = as.factor(olive_R2$Regions),FUN=mean,alpha = 0.2)
source("BoxMtest-2.R")
BoxMTest(X = olive_R2[,-1], cl = as.factor(olive_R2$Regions))
#iv) Test for normality
source("testnormality.R")
#iv) Test for normality
source("testnormality.R")
testnormality(X=olive_R2[olive_R2$Regions == 5, -1])
testnormality(X=olive_R2[olive_R2$Regions == 6, -1])
MN_5<-sapply(olive_R2[olive_R2$Regions == 5, -1], FUN = mean)
MN_6<-sapply(olive_R2[olive_R2$Regions == 6, -1], FUN = mean)
install.packages("ICSNP")
library(ICSNP)
HotellingsT2(X = olive_R2[olive_R2$Regions == 5, -1], Y = olive_R2[olive_R2$Regions == 6, -1])
?pf
?HotellingsT2
2.9045/17*19*3
T2test <- HotellingsT2(X = olive_R2[olive_R2$Regions == 5, -1], Y = olive_R2[olive_R2$Regions == 6, -1])
T2test$parameter
df1 <- T2test$parameter$df1
df2 <- T2test$parameter['df2']
df1 <- T2test$parameter['df1']
T2stat <- T2test$statistic/df2*(df1 + df2 - 1)*df1
T2stat
T2test
tp_value<-function(X, cl){
class <- levels(cl)
return(t.test(X[cl == class[1]], X[cl == class[2]], var.equal = T)$p.value)
}
tp_value<-function(X, cl){
class <- levels(cl)
return(t.test(X[cl == class[1]], X[cl == class[2]], var.equal = T)$p.value)
}
p_vals <- sapply(olive_R2[,-1], tp_value, cl = as.factor(olive_R2$Regions))
p.adjust(p_vals, method = "bonferroni")
p.adjust(p_vals[order(p_vals)], method = "fdr")
library(car)
install.packages("car")
mean_R1 <- sapply(olive_R1[,-1], mean)
mean_R2 <- sapply(olive_R2[,-1], mean)
mean_R3 <- sapply(olive_R3[,-1], mean)
mean_Rs <- cbind(rbind(mean_R1, mean_R2, mean_R3))
faces(mean_Rs, labels = c("R1", "R2", "R3"))
install.packages("TeachingDemos")
#c) Three main regions
#i)Display the Chernoff faces
library(TeachingDemos)
faces(mean_Rs, labels = c("R1", "R2", "R3"))
#ii) Provide a one-way multivariate analysis of variance.
library(car)
dataEllipse(olive_R2$CH5, olive_R2$CH6, groups = as.factor(olive_R2$Regions), levels=0.95, xlab = "CH5", ylab = "CH6", col = c("red", "blue"), ylim = c(10, 45), group.labels = c("A5", "A6"))
olive
#ii) Provide a one-way multivariate analysis of variance.
BigReggion <- rep(0, nrow(olive))
BigRegions[olive$Regions %in% 1:4] <- 1
BigRegions[olive$Regions %in% 5:6] <- 2
BigRegions[olive$Regions %in% 7:9] <- 3
#ii) Provide a one-way multivariate analysis of variance.
BigRegions <- rep(0, nrow(olive))
BigRegions[olive$Regions %in% 1:4] <- 1
BigRegions[olive$Regions %in% 5:6] <- 2
BigRegions[olive$Regions %in% 7:9] <- 3
olive <- data.frame(olive, BigRegions = as.factor(BigRegions))
fit.lm <- lm(cbind(CH1, CH2, CH3, CH4, CH5, CH6, CH7, CH8) ~ BigRegions, data = olive)
fit.manova <- Manova(fit.lm)
summary(fit.manova)
#b) Choose the R2
#i) Calculate the correlation matrix of the two sub-regions
cor(olive_R2[olive_R2$Regions == 5, -1])
cor(olive_R2[olive_R2$Regions == 6, -1])
cor(olive_R2[olive_R2$Regions == 6, -1])
SD_5<-sapply(olive_R2[olive_R2$Regions == 5, -1], FUN = sd)
SD_6<-sapply(olive_R2[olive_R2$Regions == 6, -1], FUN = sd)
SD5
SD_5
SD_6
BoxMTest(X = olive_R2[,-1], cl = as.factor(olive_R2$Regions))
source("BoxMtest-2.R")
BoxMTest(X = olive_R2[,-1], cl = as.factor(olive_R2$Regions))
summary(T2test)
T2tw
T2test
T2stat
p.adjust(p_vals, method = "bonferroni")
p.adjust(p_vals[order(p_vals)], method = "fdr")
summary(fit.manova)
