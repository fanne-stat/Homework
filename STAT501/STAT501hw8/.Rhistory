d=read.delim("http://dnett.github.io/S510/PlantDensity.txt")
names(d)=c("x","y")
head(d)
y=d$y
x=(d$x-mean(d$x))/10
n=nrow(d)
x1=matrix(1,nrow=n,ncol=1)
x2=cbind(x1,x)
x3=cbind(x2,x^2)
x4=cbind(x3,x^3)
x5=matrix(model.matrix(~0+factor(x)),nrow=n)
I=diag(rep(1,n))
library(MASS)
proj=function(x){
x%*%ginv(t(x)%*%x)%*%t(x)
}
p1=proj(x1)
p2=proj(x2)
p3=proj(x3)
p4=proj(x4)
p5=proj(x5)
x5
(p5 - p4)%*%x5
fractions((p5 - p4)%*%x5)
fractions((p2 - p1)%*%x5)
fractions((p3 - p2)%*%x5)
fractions((p4 - p1)%*%x5)
fractions((p4 - p3)%*%x5)
fractions((p5 - p4)%*%x5)
x5
w1 <- matrix(c(1,0,0,1,0,1,0,1,0,0,1,1),ncol = 3)
w1
time=factor(rep(c(3,6),each=5))
temp=factor(rep(c(20,30,20,30),c(2,3,4,1)))
a=time
b=temp
y=c(3,5,11,13,15,5,6,6,7,16)
d=data.frame(time,temp,y)
d
x1=matrix(1,nrow=nrow(d),ncol=1)
x1
x2=cbind(x1,model.matrix(~0+a))
x2
x3=cbind(x2,model.matrix(~0+b))
x3
x4=model.matrix(~0+b:a)
x4
library(MASS)
proj=function(x){
x%*%ginv(t(x)%*%x)%*%t(x)
}
p1=proj(x1)
p2=proj(x2)
p3=proj(x3)
p4=proj(x4)
I=diag(rep(1,10))
preduced <- proj(w1)
ssereduced <- t(y) %*% (I - preduced) %*% y
x4
w1 <- x4 %*% w1
w1
preduced <- proj(w1)
ssereduced <- t(y) %*% (I - preduced) %*% y
ssereduced
ssefull <- t(y) %*% (I - p4) %*% y
ssefull
F <- (ssereduced - ssefull)/(ssefull/6)
F
w1 <- x4 %*% matrix(c(1,0,0,0,1,0,0,0,1,1,1,-1))
w1 <- x4 %*% matrix(c(1,0,0,0,1,0,0,0,1,1,1,-1),byrow= T, ncol = 3)
w1
preduced <- proj(w1)
ssereduced <- t(y) %*% (I - preduced) %*% y
ssereduced
F <- (ssereduced - ssefull)/(ssefull/6)
F
## Problem 3
library(tidyr)
library(discretization)
install.packages("discretization")
library(GGally)
#Create parallel plot with colour by the group
install.packages("GGally")
library(GGally)
setwd("C:/Users/fanne/Dropbox/Homework/STAT501/STAT501hw6")
library(MASS)
crabs.data <- crabs[,-c(1,2,3)]
#1(a)
crabs.pc <- prcomp(crabs.data)
s <- crabs.pc$sdev^2
pvar<-s/sum(s)
cat("proportion of variance: ", pvar, fill=T)
cpvar <- cumsum(s)/sum(s)
cat("cumulative proportion of variance: ", cpvar, fill=T)
crabs.type <-as.factor(paste(crabs[,1], crabs[,2], sep = ""))
plot(crabs.pc$x[,1],crabs.pc$x[,2],
xlab="PC1",
ylab="PC2",type="n")
text(crabs.pc$x[,1],crabs.pc$x[,2],labels=crabs.type, col = rainbow(4)[as.numeric(crabs.type)])
fit.lm <- lm(crabs.pc$x[,1:2]~as.factor(crabs.type))
library(car)
fit.manova <- Manova(fit.lm)
summary(fit.manova)
install.packages("kernlab")
?kpca
??kpca
kpa
kpca
#1(b)
library(kernlab)
?kpca
crabs.kpc <- kpca(x = crabs.data,kernel = "rbfdot", kpar = list(sigma = 0.2), features = 2)
crabs.kpc <- kpca(x = as.matrix(crabs.data),kernel = "rbfdot", kpar = list(sigma = 0.2), features = 2)
crabs.kpc
str(crabs.kpc)
str(crabs.data)
crabs.kpc <- kpca(x = as.matrix(crabs.data),kernel = "rbfdot", kpar = list(sigma = 0.2), features = 5)
summary(crabs.kpc)
str(crabs.kpc)
crabs.kpc <- kpca(x = as.matrix(crabs.data),kernel = "rbfdot", kpar = list(sigma = 0.2), features = 2)
plot(crabs.kpc@rotated[,1],crabs.kpc@rotated[,2],
xlab="PC1",
ylab="PC2",type="n")
text(crabs.kpc@rotated[,1],crabs.kpc@rotated[,2],labels=crabs.type, col = rainbow(4)[as.numeric(crabs.type)])
for(sigma in c(0.2, 0.4, 0.8, 1, 1.5, 3)){
crabs.kpc <- kpca(x = as.matrix(crabs.data),kernel = "rbfdot", kpar = list(sigma = sigma), features = 2)
plot(crabs.kpc@rotated[,1],crabs.kpc@rotated[,2],
xlab="PC1",
ylab="PC2",type="n")
text(crabs.kpc@rotated[,1],crabs.kpc@rotated[,2],labels=crabs.type, col = rainbow(4)[as.numeric(crabs.type)])
}
View(crabs.data)
View(crabs.data)
# test 2 is enough
source("PCs.proportion.variation.enuff.R")
PCs.proportion.variation.enuff(lambda = s, q = 2, propn = 1, nobs = nrow(crabs.data))
PCs.proportion.variation.enuff(lambda = s, q = 2,nobs = nrow(crabs.data))
PCs.proportion.variation.enuff(lambda = s, q = 1, nobs = nrow(crabs.data), propn = 0.98)
PCs.proportion.variation.enuff(lambda = s, q = 1, nobs = nrow(crabs.data), propn = 0.99)
PCs.proportion.variation.enuff(lambda = s, q = 2, nobs = nrow(crabs.data), propn = 0.99)
PCs.proportion.variation.enuff(lambda = s, q = 2, nobs = nrow(crabs.data), propn = 0.9825)
PCs.proportion.variation.enuff(lambda = s, q = 1, nobs = 200, propn = 0.9825)
PCs.proportion.variation.enuff(lambda = s, q = 1, nobs = 200, propn = 1)
PCs.proportion.variation.enuff(lambda = s, q = 1, nobs = 200, propn = 0.99)
PCs.proportion.variation.enuff(lambda = s, q = 2, nobs = 200, propn = 0.99)
#2(a)
zipdigits <- read.table("ziptrain.dat")
head(zipdigits)
ncol(zipdigits)
nrow(zipdigits)
#2(a)
ziptrain <- read.table("ziptrain.dat")
zipdigit <- read.ftable("zipdigit.dat")
rm(zipdigits)
zipdigit <- read.table("zipdigit.dat")
nrow(zipdigit)
zipdigit <- as.factor(read.table("zipdigit.dat"))
zipdigit <- as.factor(read.table("zipdigit.dat")[,1])
fit1 <- lm(ziptrain[,1] ~ zipdigit)
summary(fit1)
anova(fit1)
str(anova(fit1))
anova(fit1)$'Pr(>F)'
anova(fit1)[[5]]
anova(fit1)[[5]][1]
test_equal_mean(x, cl){
fit <- lm(x~cl)
return(anova(fit)$'Pr>F'[1])
}
test_equal_mean(x, cl){
fit <- lm(x~cl)
return(anova(fit)$'Pr(>F)'[1])
}
test_equal_mean(x, cl){
fit <- lm(x~cl)
return(anova(fit)$[[5]][1])
}
ziptrain <- read.table("ziptrain.dat")
zipdigit <- as.factor(read.table("zipdigit.dat")[,1])
test_equal_mean(x, cl){
fit <- lm(x~cl)
return(anova(fit)[[5]][1])
}
test_equal_mean<- function(x, cl){
fit <- lm(x~cl)
return(anova(fit)[[5]][1])
}
fits <- sapply(ziptrain, FUN = test_equal_mean)
fits <- sapply(ziptrain, FUN = test_equal_mean, cl = zipdigit)
fits
pval_equal_mean<- function(x, cl){
fit <- lm(x~cl)
return(anova(fit)[[5]][1])
}
pvals <- sapply(ziptrain, FUN = pval_equal_mean, cl = zipdigit)
pval.bonf <- p.adjust(pval, "bonferronni")
pval.bonf <- p.adjust(pval, "bonferroni")
pval.bonf <- p.adjust(pvals, "bonferroni")
pval.bonf
which(pval.bonf > 0.05)
pval.fdr <- p.adjust(pvals, "fdr")
which(pval.fdr > 0.05)
id <- order(pvals, decreasing = F)
pvals[id[1:2]]
pvals[id[100:102]]
id100 <- id[1:100]
ziptrain100 <- ziptrain[,id100]
ziptrain100 %>% ncol
library(dplyr)
ziptrain100 %>% ncol
library(energy)
mvnorm.etest(ziptrain100[zipdigit==0,])
mvnorm.etest(X = ziptrain100[zipdigit==0,])
mvnorm.etest(X = ziptrain100[zipdigit==1,])
?mvnorm.etest
mvnorm.etest(x = ziptrain100[zipdigit==1,])
mvnorm.etest(x = ziptrain100[zipdigit==1,], R = 999)
head(ziptrain100[zipdigit==1,])
source("testnormality.R")
testnormality(X = ziptrain100[zipdigit == 1,])
testnormality(X = ziptrain100[zipdigit == 0,])
source("BoxMTest-2.R")
BoxMTest(X = ziptrain100, cl = zipdigit)
?var
#ii
n <- table(zipdigit)
n
#ii
n <- table(zipdigit)[2,]
#ii
n <- table(zipdigit)[1]
n
#ii
n <- as.vector(table(zipdigit))
n
n <- as.vector(table(zipdigit))
means <- list()
for(i in 1:10){
means[[i]] <- apply(ziptrain100[zipdigit == i-1], MARGIN = 2, FUN = mean)
}
n <- as.vector(table(zipdigit))
means <- list()
for(i in 1:10){
means[[i]] <- apply(ziptrain100[zipdigit == i-1,], MARGIN = 2, FUN = mean)
}
means[[1]]
length(means[[1]])
vars <- list()
vars <- list()
for(i in 1:10){
vars[[i]] <- cov(ziptrain100[zipdigit == i-1,])
}
vars[[1]]
dim(vars[[1]])
nrowziptrain100[zipdigit == 0,]()
nrow(ziptrain100[zipdigit == 0,])
var[[1]][1,]
vars[[1]][1,]
str(vars[[1]][1,])
quard <- function(x, A){
x <- as.vector(x)
return(t(x)%*%A%*%x)
}
lambda <- 0
for(i in 1:10){
Xi <- ziptrain100[zipdigit == i-1,]
Xicentered <- Xi - matrix(rep(means[[i]], n[i]), ncol = 100, byrow = T)
Xim <- Xi - matrix(rep(muhat, n[i]), ncol = 100, byrow = T)
fulli <- sum(apply(Xicentered, MARGIN = 1, FUN = quard, A = solve(vars[[i]])))
reduecedi <-  sum(apply(Xim, MARGIN = 1, FUN = quard, A = solve(vars[[i]])))
lambda <- fulli - reducedi
}
lambda <- 2*lambda
muhat <- NULL
l <- 0
r <- 0
r <- 0
l <- 0
for(i in 1:10){
r <- r + n[i]*solve(vars[[i]]) %*% means[[i]]
l <- l + n[i]*solve(vars[[i]])
}
solva(vars[[1]])
solve(vars[[1]])
solve(vars[[2]])
solve(vars[[3]])
?solve
ginv(var[[2]])
ginv(vars[[2]])
r <- 0
l <- 0
for(i in 1:10){
r <- r + n[i]*ginv(vars[[i]]) %*% means[[i]]
l <- l + n[i]*ginv(vars[[i]])
}
muhat <- ginv(l)%*%r
str(muhat)
str(means[[i]])
muhat <- as.vector(ginv(l)%*%r)
str(muhat)
for(i in 1:10){
Xi <- ziptrain100[zipdigit == i-1,]
Xicentered <- Xi - matrix(rep(means[[i]], n[i]), ncol = 100, byrow = T)
Xim <- Xi - matrix(rep(muhat, n[i]), ncol = 100, byrow = T)
fulli <- sum(apply(Xicentered, MARGIN = 1, FUN = quard, A = ginv(vars[[i]])))
reduecedi <-  sum(apply(Xim, MARGIN = 1, FUN = quard, A = ginv(vars[[i]])))
lambda <- fulli - reducedi
}
lambda <- 2*lambda
for(i in 1:10){
Xi <- ziptrain100[zipdigit == i-1,]
Xicentered <- Xi - matrix(rep(means[[i]], n[i]), ncol = 100, byrow = T)
Xim <- Xi - matrix(rep(muhat, n[i]), ncol = 100, byrow = T)
fulli <- sum(apply(Xicentered, MARGIN = 1, FUN = quard, A = ginv(vars[[i]])))
reducedi <-  sum(apply(Xim, MARGIN = 1, FUN = quard, A = ginv(vars[[i]])))
lambda <- fulli - reducedi
}
lambda <- 2*lambda
lambda
lambda <- 0
for(i in 1:10){
Xi <- ziptrain100[zipdigit == i-1,]
Xicentered <- Xi - matrix(rep(means[[i]], n[i]), ncol = 100, byrow = T)
Xim <- Xi - matrix(rep(muhat, n[i]), ncol = 100, byrow = T)
fulli <- sum(apply(Xicentered, MARGIN = 1, FUN = quard, A = ginv(vars[[i]])))
reducedi <-  sum(apply(Xim, MARGIN = 1, FUN = quard, A = ginv(vars[[i]])))
lambda <- reducedi - fulli
}
lambda
pchisq(lambda, df = 9, lower.tail = F)
#(b)
ziptrain.centered <- array(dim = dim(ziptrain))
ziptrain.centered <- array(dim = dim(ziptrain))
for(i in 1:10){
mean <- apply(ziptrain[zipdigit == i-1,], MARGIN = 2, FUN = mean)
ziptrain.centered[zipdigit == i-1,] <- ziptrain[zipdigit == i-1] - mean
}
ziptrain.centered <- array(dim = dim(ziptrain))
for(i in 1:10){
mean <- apply(ziptrain[zipdigit == i-1,], MARGIN = 2, FUN = mean)
ziptrain.centered[zipdigit == i-1,] <- ziptrain[zipdigit == i-1,] - mean
}
for(i in 1:10){
mean <- apply(ziptrain[zipdigit == i-1,], MARGIN = 2, FUN = mean)
ziptrain.centered[zipdigit == i-1,] <- ziptrain[zipdigit == i-1,] - matrix(rep(mean, n[i]), ncol = 256, byrow = T)
}
mean <- apply(ziptrain[zipdigit == 1-1,], MARGIN = 2, FUN = mean)
ziptrain[zipdigit == 1-1,] - matrix(rep(mean, n[1]), ncol = 256, byrow = T)
ziptrain.centered[zipdigit == 0,] <- ziptrain[zipdigit == i-1,] - matrix(rep(mean, n[i]), ncol = 256, byrow = T)
ziptrain.centered <- NULL
for(i in 1:10){
mean <- apply(ziptrain[zipdigit == i-1,], MARGIN = 2, FUN = mean)
rbind(ziptrain.centered, ziptrain[zipdigit == i-1,] - matrix(rep(mean, n[i]), ncol = 256, byrow = T))
}
str(ziptrain.centered)
ziptrain.centered <- NULL
for(i in 1:10){
mean <- apply(ziptrain[zipdigit == i-1,], MARGIN = 2, FUN = mean)
ziptrain.centered <- rbind(ziptrain.centered, ziptrain[zipdigit == i-1,] - matrix(rep(mean, n[i]), ncol = 256, byrow = T))
}
str(ziptrain.centered)
dim(ziptrain.centered)
dim(ziptrain)
ziptrain.pc <- prcomp(ziptrain.centered)
source("PCs.proportion.variation.enuff.R")
for(i in 1:256){
p <- PCs.proportion.variation.enuff(lambda = ziptrain.pc$sdev^2, q = i, propn = 0.8, nobs = nrow(ziptrain.centered))
if(p > 0.05) break
}
p
PCs.proportion.variation.enuff(lambda = ziptrain.pc$sdev^2, q = 1, propn = 0.8, nobs = nrow(ziptrain.centered))
for(i in 1:256){
p <- PCs.proportion.variation.enuff(lambda = ziptrain.pc$sdev^2, q = i, propn = 0.8, nobs = nrow(ziptrain.centered))
if(p > 0.05){
break
}
}
p
p <- rep(0, 256)
for(i in 1:256){
p[i] <- PCs.proportion.variation.enuff(lambda = ziptrain.pc$sdev^2, q = i, propn = 0.8, nobs = nrow(ziptrain.centered))
}
p[1]
p[]256
p[256]
p[100]
p[30]
p[50]
p[11]
p[12]
p[13]
p[20]
p[25]
p[29]
p[30]
p[36]
p[39]
p[40]
min(which(p > 0.05))
cumsum(ziptrain.pc$sdev^2)/sum(ziptrain.pc$sdev^2)[30:45]
ziptrain.pc$sdev^2
sum(ziptrain.pc$sdev^2)
cumsum(ziptrain.pc$sdev^2)/sum(ziptrain.pc$sdev^2)
ziptrain.pc$rotation
dim(ziptrain.pc$rotation)
ziptrain.pc$rotation[1,2]
ziptrain.pc$rotation[2,1]
t(ziptrain.pc$rotation)%*%ziptrain.pc$rotation
diag(t(ziptrain.pc$rotation)%*%ziptrain.pc$rotation)
diag(ziptrain.pc$rotation)%*%t(ziptrain.pc$rotation))
diag(ziptrain.pc$rotation%*%t(ziptrain.pc$rotation))
for(i in 1:10){
mean <- apply(ziptrain[zipdigit == i-1,], MARGIN = 2, FUN = mean)
zipmean <- rbind(zipmean,  matrix(rep(mean, n[i]), ncol = 256, byrow = T))
}
zipmean <- NULL
for(i in 1:10){
mean <- apply(ziptrain[zipdigit == i-1,], MARGIN = 2, FUN = mean)
zipmean <- rbind(zipmean,  matrix(rep(mean, n[i]), ncol = 256, byrow = T))
}
zipproj <- ziptrain.pc$x[,1:40] + zipmean%*%ziptrain.pc$rotation[,1:40]
class <- rep(0:9, each = n)
n
?rep
class <- NULL
for(i in 0:9){
class <- c(class, rep(i, n[i]))
}
class <- NULL
for(i in 0:9){
class <- c(class, rep(i, n[i+1]))
}
length(class)
class <- as.factor(class)
source("radviz2d.R")
radviz2d(dataset = cbind(ziptrain.pc$x, class), name = "Full dimension")
radviz2d(dataset = cbind(ziptrain.pc$x, class), name = "Full dimension")
library(drep)
library(dprep)
radviz2d(dataset = cbind(ziptrain.pc$x, class), name = "Full dimension")
radviz2d(dataset = cbind(zipproj, class), name = "Full dimension")
radviz2d(dataset = cbind(zipproj, class), name = "Reduced dimension")
source("starcoord.R")
starcoord(data = cbind(ziptrain.pc$x), class), class = T)
starcoord(data = cbind(ziptrain.pc$x,class), class = T)
starcoord(data = cbind(ziptrain.pc$x,class), class = T, main = "Full dimension")
starcoord(data = cbind(zipproj,class), class = T, main = "Full dimension")
starcoord(data = cbind(zipproj,class), class = T, main = "Reduced dimension")
source("ggandrews.R")
ggandrews()
ggandrews
iris
dim(iris)[2]
ggandrews(df = cbind(ziptrain.pc$x,class), clr = ncol(ziptrain.pc$x) + 1, type = 2)
zipproj_full <- ziptrain.pc$x + zipmean%*%ziptrain.pc$rotation
radviz2d(dataset = cbind(zipproj_full, class), name = "Full dimension")
starcoord(data = cbind(zipproj,class), class = T, main = "Full dimension")
starcoord(data = cbind(zipproj_full,class), class = T, main = "Full dimension")
cat("proportion of variance: ", pvar, fill=T)
cat("cumulative proportion of variance: ", cpvar, fill=T)
summary(fit.manova)
BoxMTest(X = ziptrain100, cl = zipdigit)
pchisq(lambda, df = 9, lower.tail = F)
lambda
