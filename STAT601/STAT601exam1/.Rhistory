w[i, j] <- 1 - (abs(i - j))^2/(k-1)^2
}
}
}
#  Compute the weighted Kappa
xw <- x*w
ew <- e*w
wr <- apply(w*xc, 2, sum)/n
wc <- apply(w*xr, 2, sum)/n
kw1 <- sum(xw)/n
kw2 <- sum(ew)/n
tt2 <- outer(wr, one)+outer(one, wc)
tt3 <- ((w*(1-kw2))-(tt2*(1-kw1)))**2
kappaw <- (kw1-kw2)/(1-kw2)
#  Compute standard errors:
#     sw11 does not assume random agreement
#     sw22  assumes only random agreement
sw11 <- sum(x*tt3)/n
sw11 <- (sw11-(kw1*kw2-2*kw2+kw1)**2)/
(n*(1-kw2)**4)
sw1 <- sw11**.5
sw22 <- (w-tt2)**2
sw22 <- ((sum(e*sw22)/n)-(kw2**2))/
(n*(1-kw2)**2)
sw2 <- sw22**.5
#  Construct 95% confidence intervals
#  and tests for random agreement
tk <- kappa/s2
tkw <- kappaw/sw2
tt4 <- tk**2
pk <- (1-pchisq(tt4, 1))
tt4 <- tkw**2
pkw <-(1-pchisq(tt4, 1))
ckl <- kappa-(1.96)*s1
cku <- kappa+(1.96)*s1
ckwl <- kappaw-(1.96)*sw1
ckwu <- kappaw+(1.96)*sw1
ww <- matrix( w, ncol=k, nrow=k)
#print results
cat("\n", "       Unweighted Kappa = ", signif(kappa,5))
cat("\n", "         Standard error = ", signif(s1,5))
cat("\n", "95% confidence interval:  ", signif(ckl,5), signif(cku,5))
cat("\n", "p-value for test of random agreement = ", signif(pk,5), "\n", "\n")
cat("\n", "         Weighted Kappa = ", signif(kappaw,5))
cat("\n", "         Standard error = ", signif(sw1,5))
cat("\n", "95% confidence interval:  ", signif(ckwl,5), signif(ckwu,5))
cat("\n", "p-value for test of random agreement = ", signif(pkw,5),"\n")
}
kappa.f(xw)
kappa.f(xb)
source('C:/Users/fanne/Dropbox/Homework/STAT557/STAT557hw2YifanZhu/kappaboot.R')
results
boot.ci(results, type="all", index=1)
?boot.ci
source('C:/Users/fanne/Dropbox/Homework/STAT557/STAT557hw2YifanZhu/kappaboot.R')
boot.ci(results, type="all", index=1)
0.061583^2 +  0.054328^2
-0.12456 - (-0.073792)
-0.050768 - 1.96 *0.006743997
-0.050768 + 1.96 *0.006743997
x.array <- array(c(81, 34, 24, 71, 118, 74, 69, 105, 82, 63, 52, 93),c(2,2,3))
mantelhaen.test(x.array, conf.level=0.95)
?mantelhaen.test
library(DescTools)
install.packages("DescTools")
library(DescTools)
BreslowDayTest(x.array)
mantelhaen.test(x.array, conf.level=0.95, exact = T)
?Zelen
??zelen
install.packages("NSM3")
library(NSM3)
zelen.test(x.array)
?zelen.test
zelen.test(example = T)
zelen.test(x.array, 5)
zelen.test(x.array, r = 5)
install.packages("VGAM")
M <- c(500, 1000*1:10, 20000, 50000, 100000, 200000)
M
?boot
library(boot)
?boot
aircondit
d <- data.frame(n = 10, lambda = 5, method1 = c(1,2,3))
d
?row.names
row.names(d) <- c("m1, m2, m3")
row.names(d) <- c("", m1, m2, m3")
)
row.names(d)
row.names(d) <- c("m1", "m2", "m3")
d
rm(d)
for (M in c(100)){
xs <- matrix(rnorm(M*N), ncol = N)
ys <- matrix(rnorm(M*N), ncol = N)
for (n in 1:N){
P1Ms[n] <- P1M(xs[,n],y[,n])
P2Ms[n] <- P2M(xs[,n],y[,n])
}
P1Mss <- rbind(P1Mss, P1Ms)
P2Mss <- rbind(P2Mss, P2Ms)
}
Ms <- c(100*1:10, 2000)
N <- 2000
P1Ms <- rep(0, N)
P2Ms <- P1Ms
P1M <- function(x,y){
M <- length(x)
return(sum(x<y)/M)
}
P2M <- function(x,y){
M <- length(x)
x1 <- rep(x, times = M)
y1 <- rep(y, each = M)
return(sum(x1 < y1)/M^2)
}
P1Mss <- NULL
P2Mss <- NULL
for (M in c(100)){
xs <- matrix(rnorm(M*N), ncol = N)
ys <- matrix(rnorm(M*N), ncol = N)
for (n in 1:N){
P1Ms[n] <- P1M(xs[,n],y[,n])
P2Ms[n] <- P2M(xs[,n],y[,n])
}
P1Mss <- rbind(P1Mss, P1Ms)
P2Mss <- rbind(P2Mss, P2Ms)
}
for (M in c(100)){
xs <- matrix(rnorm(M*N), ncol = N)
ys <- matrix(rnorm(M*N), ncol = N)
for (n in 1:N){
P1Ms[n] <- P1M(xs[,n],ys[,n])
P2Ms[n] <- P2M(xs[,n],ys[,n])
}
P1Mss <- rbind(P1Mss, P1Ms)
P2Mss <- rbind(P2Mss, P2Ms)
}
P1Mss
head(P1Mss)
P1Mss[1:5]
P1Mss[,1:5]
length(xs[,1])
for (M in c(1000)){
xs <- matrix(rnorm(M*N), ncol = N)
ys <- matrix(rnorm(M*N), ncol = N)
for (n in 1:N){
P1Ms[n] <- P1M(xs[,n],ys[,n])
P2Ms[n] <- P2M(xs[,n],ys[,n])
}
P1Mss <- rbind(P1Mss, P1Ms)
P2Mss <- rbind(P2Mss, P2Ms)
}
dim(P1Mss)
?var
apply(P1Mss, dim = 2, var)
apply(P1Mss, dim = 2, FUN = var)
apply(P1Mss, MARGIN = 2, FUN = var)
apply(P1Mss, MARGIN = 1, FUN = var)
apply(P2Mss, MARGIN = 1, FUN = var)
apply(P1Mss, MARGIN = 1, FUN = var)/apply(P1Mss, MARGIN = 1, FUN = var)
apply(P1Mss, MARGIN = 1, FUN = var)/apply(P2Mss, MARGIN = 1, FUN = var)
P1Mss <- NULL
P2Mss <- NULL
Ms <- c(100*1:10, 2000)
N <- 2000
P1Ms <- rep(0, N)
P2Ms <- P1Ms
for (M in Ms){
xs <- matrix(rnorm(M*N), ncol = N)
ys <- matrix(rnorm(M*N), ncol = N)
for (n in 1:N){
P1Ms[n] <- P1M(xs[,n],ys[,n])
P2Ms[n] <- P2M(xs[,n],ys[,n])
}
P1Mss <- cbind(P1Mss, P1Ms)
P2Mss <- cbind(P2Mss, P2Ms)
}
ep1m <- apply(P1Mss, MARGIN = 2, FUN = mean)
ep1m <- apply(P2Mss, MARGIN = 2, FUN = mean)
varp1m <- apply(P1Mss, MARGIN = 2, FUN = var)
varp2m <- apply(P2Mss, MARGIN = 2, FUN = var)
ep1m
ep2m
ep1m <- apply(P1Mss, MARGIN = 2, FUN = mean)
ep2m <- apply(P2Mss, MARGIN = 2, FUN = mean)
ep1m
ep2m
varp1m
varp2m
varp1m/varp2m
library(dplyr)
?filter
?mask
??mask
?maply
library(plyr)
detach(dplyr)
detach("dplyr")
unloadNamespace("dplyr")
unloadNamespace("plyr")
library(plyr)
detach("package:dplyr", TRUE)
detach("package:plyr", TRUE)
detach("package:dplyr", TRUE)
library(dplyr)
detach("package:dplyr", TRUE)
library(plyr)
library(plyr); library(dplyr)
?maply
maply(cbind(1:5, 1:5), rnorm, n = 5)
maply(cbind(1:3, 1:3), rnorm, n = 5)
maply(cbind(1:3, 1:3, 1:3), rnorm, n = 5)
maply(cbind(1:3, 1:3), rnorm, n = 5)
maply(cbind(1:3, 1:3), rnorm, n = 5, mean = 0)
maply(cbind(1:3, 1:3), rnorm, n = 5, mean = 0, sd = 1)
aaply(cbind(1:3, 1:3), .margins = c(1,2), rnorm, n = 5, mean = 0, sd = 1)
aaply(cbind(1:3, 1:3), .margins = c(1,2), rnorm, n = 5, mean = 0)
#1
##(a)
olive <- read.table(file = "http://maitra.public.iastate.edu/stat501/datasets/olive.dat")
head(olive)
#1
##(a)
olive <- read.table(file = "http://maitra.public.iastate.edu/stat501/datasets/olive.dat", header = T)
head(olive)
levels(group.id)
levels(olive$group.id)
levels(as.factor(olive$group.id))
?stars
?radar
??radar
??spider
?stars
stars(mtcars[, 1:7], locations = c(0, 0), radius = FALSE,
key.loc = c(0, 0), main = "Motor Trend Cars", lty = 2)
mtcars[,1:7]
attach(airquality)
Month <- factor(Month, labels = month.abb[5:9])
Mon
Month
month.abb
airquality
pairwise.t.test(Ozone, Month)
setwd("C:/Users/fanne/Dropbox/Homework/STAT601/STAT601exam1")
?match.fun
Time
model1gen <- function(lambda, gamma, sigma, tau, Time){
Y <- rep(0, Time)
mu0 <- rnorm(mean = lambda, sd = tau)
Y[1] <- mu0
mutm1 <- mu0
for(i in 2:Time){
mut <- lambda + gamma * (mutm1 - lambda)
wt <- rnorm(0, sigma)
Y[i] <- mut + wt
mutm1 <- mut
}
}
plotseries <- function(Time, n, func){
gen <- match.fun(func)
M <- NULL
for(k in 1:n){
series <- gen(Time)
M <- cbind(M, series)
}
plot(x = 1:Time, y = 1:Time, 'n', ylim = 1.1*c(min(M), max(M)), xlab = "t", ylab = "Y")
for(k in 1:n){
lines(x = 1:Time, y = M[,k], color = k)
}
}
plotseries(2000, 6, func = function(Time) return(model1gen(lambda = 10, gamma = 0.75, sigma = 2, tau = 4)))
plotseries(Time = 2000, n = 6, func = function(Time) return(model1gen(lambda = 10, gamma = 0.75, sigma = 2, tau = 4)))
model1gen <- function(lambda, gamma, sigma, tau, Time){
Y <- rep(0, Time)
mu0 <- rnorm(mean = lambda, sd = tau, n = 1)
Y[1] <- mu0
mutm1 <- mu0
for(i in 2:Time){
mut <- lambda + gamma * (mutm1 - lambda)
wt <- rnorm(0, sigma, n = 1)
Y[i] <- mut + wt
mutm1 <- mut
}
}
plotseries(Time = 2000, n = 6, func = function(Time) return(model1gen(lambda = 10, gamma = 0.75, sigma = 2, tau = 4)))
plotseries(Time = 2000, n = 6, func = function(Time) return(model1gen(lambda = 10, gamma = 0.75, sigma = 2, tau = 4, Time = Time)))
plotseries(Time = 2000, n = 6, func = function(Time) return(model1gen(lambda = 10, gamma = 0.75, sigma = 2, tau = 4)))
plotseries <- function(Time, n, func){
browser()
gen <- match.fun(func)
M <- NULL
for(k in 1:n){
series <- gen(Time)
M <- cbind(M, series)
}
plot(x = 1:Time, y = 1:Time, 'n', ylim = 1.1*c(min(M), max(M)), xlab = "t", ylab = "Y")
for(k in 1:n){
lines(x = 1:Time, y = M[,k], color = k)
}
}
plotseries(Time = 2000, n = 6, func = function(Time) return(model1gen(lambda = 10, gamma = 0.75, sigma = 2, tau = 4, Time = Time)))
gen(10)
plotseries(Time = 2000, n = 6, func = function(Time) return(model1gen(lambda = 10, gamma = 0.75, sigma = 2, tau = 4, Time = Time)))
gen
gen(5)
c <- gen(5)
plot(1:Time, model1gen(10, 0.75, 2, 4, 2000), 'n')
plot(1:2000, model1gen(10, 0.75, 2, 4, 2000), 'n')
lines(1:2000, model1gen(10, 0.75, 2, 4, 2000))
lines(1:200, model1gen(10, 0.75, 2, 4, 200))
plot(1:200, model1gen(10, 0.75, 2, 4, 200))
?rnorm
model1gen <- function(lambda, gamma, sigma, tau, Time){
Y <- rep(0, Time)
mu0 <- rnorm(mean = lambda, sd = tau, n = 1)
Y[1] <- mu0
mutm1 <- mu0
for(i in 2:Time){
mut <- lambda + gamma * (mutm1 - lambda)
wt <- rnorm(0, sigma, n = 1)
Y[i] <- mut + wt
mutm1 <- mut
}
return(Y)
}
plotseries <- function(Time, n, func){
# browser()
gen <- match.fun(func)
M <- NULL
for(k in 1:n){
series <- gen(Time)
M <- cbind(M, series)
}
plot(x = 1:Time, y = 1:Time, 'n', ylim = 1.1*c(min(M), max(M)), xlab = "t", ylab = "Y")
for(k in 1:n){
lines(x = 1:Time, y = M[,k], color = k)
}
}
plotseries(Time = 2000, n = 6, func = function(Time) return(model1gen(lambda = 10, gamma = 0.75, sigma = 2, tau = 4, Time = Time)))
plotseries(Time = 200, n = 6, func = function(Time) return(model1gen(lambda = 10, gamma = 0.75, sigma = 2, tau = 4, Time = Time)))
plotseries(Time = 200, n = 6, func = function(Time) return(model1gen(lambda = 10, gamma = 0.75, sigma = 2, tau = 20, Time = Time)))
?lines
plotseries <- function(Time, n, func){
# browser()
gen <- match.fun(func)
M <- NULL
for(k in 1:n){
series <- gen(Time)
M <- cbind(M, series)
}
plot(x = 1:Time, y = 1:Time, 'n', ylim = 1.1*c(min(M), max(M)), xlab = "t", ylab = "Y")
for(k in 1:n){
lines(x = 1:Time, y = M[,k], col = k)
}
}
plotseries(Time = 200, n = 6, func = function(Time) return(model1gen(lambda = 10, gamma = 0.75, sigma = 2, tau = 20, Time = Time)))
plotseries(Time = 200, n = 6, func = function(Time) return(model1gen(lambda = 10, gamma = 0.75, sigma = 2, tau = 10, Time = Time)))
model2gen <- function(lambda, gamma, sigma, tau, Time){
Y <- rep(0, Time)
mu0 <- rnorm(mean = lambda, sd = sqrt(tau^2/(1 - gamma^2)), n = 1)
Y[1] <- mu0
mutm1 <- mu0
for(i in 2:Time){
vt <- rnorm(n = 1, mean = 0, sd = tau)
mut <- lambda + gamma * (mutm1 - lambda) + vt
wt <- rnorm(0, sigma, n = 1)
Y[i] <- mut + wt
mutm1 <- mut
}
return(Y)
}
model4gen <- function(mu, gamma, sigma, Time){
Y <- rep(0, Time)
W0 <- rnorm(mean = lambda, sd = sqrt(sigma^2/(1 - gamma^2)), n = 1)
Y[1] <- mu + W0
Wtm1 <- W0
for(i in 2:Time){
epsilont <- rnorm(n = 1, mean = 0, sd = sigma)
Wt <- gamma * Wtm1 + epsilont
Y[i] <- mu + Wt
Wtm1 <- Wt
}
return(Y)
}
plotseries(Time = 200, n = 6, func = function(Time) return(model2gen(lambda = 10, gamma = 0.75, sigma = 2, tau = 10, Time = Time)))
plotseries(Time = 200, n = 6, func = function(Time) return(model3gen(lambda = 10, gamma = 0.75, sigma = 2, tau = 10, Time = Time)))
model3gen <- function(lambda, gamma, sigma, tau, Time){
Y <- rep(0, Time)
mu0 <- rnorm(mean = lambda, sd = tau, n = 1)
Y[1] <- mu0
mutm1 <- mu0
for(i in 2:Time){
vt <- rnorm(n = 1, mean = 0, sd = tau)
mut <- mutm1 + vt
wt <- rnorm(0, sigma, n = 1)
Y[i] <- mut + wt
mutm1 <- mut
}
return(Y)
}
plotseries(Time = 200, n = 6, func = function(Time) return(model3gen(lambda = 10, gamma = 0.75, sigma = 2, tau = 10, Time = Time)))
plotseries(Time = 200, n = 6, func = function(Time) return(model4gen(mu = 10, gamma = 0.75, sigma = 2, Time = Time)))
model4gen <- function(mu, gamma, sigma, Time){
Y <- rep(0, Time)
W0 <- rnorm(mean = 0, sd = sqrt(sigma^2/(1 - gamma^2)), n = 1)
Y[1] <- mu + W0
Wtm1 <- W0
for(i in 2:Time){
epsilont <- rnorm(n = 1, mean = 0, sd = sigma)
Wt <- gamma * Wtm1 + epsilont
Y[i] <- mu + Wt
Wtm1 <- Wt
}
return(Y)
}
plotseries(Time = 200, n = 6, func = function(Time) return(model4gen(mu = 10, gamma = 0.75, sigma = 2, Time = Time)))
plotseries(model4gen(mu = 10, gamma = 0.75, sigma = 2, Time = 200))
acf(model4gen(mu = 10, gamma = 0.75, sigma = 2, Time = 200))
acf(model1gen(lambda = 10, gamma = 0.75, sigma = 2, tau = 10, Time = 200))
acf(model1gen(lambda = 10, gamma = 0.75, sigma = 2, tau = 10, Time = 200), type = "covariance")
acf(model2gen(lambda = 10, gamma = 0.75, sigma = 2, tau = 10, Time = 200), type = "covariance")
acf(model3gen(lambda = 10, gamma = 0.75, sigma = 2, tau = 10, Time = 200), type = "covariance")
res <- acf(model3gen(lambda = 10, gamma = 0.75, sigma = 2, tau = 10, Time = 200), type = "covariance")
res$series
res$acf
plotautocov <- function(Time, n, func){
# browser()
gen <- match.fun(func)
M <- NULL
for(k in 1:n){
series <- gen(Time)
M <- cbind(M, acf(series, type = "covariance")$acf)
}
plot(x = 1:Time, y = 1:Time, 'n', ylim = 1.1*c(min(M), max(M)), xlab = "t", ylab = "Y")
for(k in 1:n){
lines(x = 1:Time, y = M[,k], col = k)
}
}
plotautocov(Time = 200, n = 6, func = function(Time) return(model3gen(lambda = 10, gamma = 0.75, sigma = 2, tau = 10, Time = Time)))
plotautocov <- function(Time, n, func){
# browser()
gen <- match.fun(func)
M <- NULL
for(k in 1:n){
series <- gen(Time)
M <- cbind(M, acf(series, type = "covariance")$acf)
}
plot(x = 1:nrow(M), y = 1:nrow(M), 'n', ylim = 1.1*c(min(M), max(M)), xlab = "t", ylab = "Y")
for(k in 1:n){
lines(x = 1:nrow(M), y = M[,k], col = k)
}
}
plotautocov(Time = 200, n = 6, func = function(Time) return(model3gen(lambda = 10, gamma = 0.75, sigma = 2, tau = 10, Time = Time)))
plotautocov(Time = 200, n = 6, func = function(Time) return(model1gen(lambda = 10, gamma = 0.75, sigma = 2, tau = 10, Time = Time)))
plotautocov(Time = 200, n = 6, func = function(Time) return(model2gen(lambda = 10, gamma = 0.75, sigma = 2, tau = 10, Time = Time)))
?acf
plotautocov <- function(Time, n, func){
# browser()
gen <- match.fun(func)
M <- NULL
for(k in 1:n){
series <- gen(Time)
M <- cbind(M, acf(series, type = "covariance", plot = F)$acf)
}
plot(x = 1:nrow(M), y = 1:nrow(M), 'n', ylim = 1.1*c(min(M), max(M)), xlab = "t", ylab = "Y")
for(k in 1:n){
lines(x = 1:nrow(M), y = M[,k], col = k)
}
}
plotautocov(Time = 200, n = 6, func = function(Time) return(model1gen(lambda = 10, gamma = 0.75, sigma = 2, tau = 10, Time = Time)))
plotautocov(Time = 200, n = 6, func = function(Time) return(model2gen(lambda = 10, gamma = 0.75, sigma = 2, tau = 10, Time = Time)))
plotautocov(Time = 200, n = 6, func = function(Time) return(model3gen(lambda = 10, gamma = 0.75, sigma = 2, tau = 10, Time = Time)))
plotautocov(Time = 200, n = 6, func = function(Time) return(model4gen(mu = 10, gamma = 0.75, sigma = 2, Time = Time)))
plotautocov <- function(Time, n, func){
# browser()
gen <- match.fun(func)
M <- NULL
for(k in 1:n){
series <- gen(Time)
M <- cbind(M, acf(series, type = "covariance", plot = F)$acf)
}
plot(x = 1:nrow(M), y = 1:nrow(M), 'n', ylim = 1.1*c(min(M), max(M)), xlab = "t", ylab = "autocovariance")
for(k in 1:n){
lines(x = 1:nrow(M), y = M[,k], col = k)
}
}
plotautocov(Time = 200, n = 6, func = function(Time) return(model1gen(lambda = 10, gamma = 0.75, sigma = 2, tau = 10, Time = Time)))
plotautocov(Time = 200, n = 6, func = function(Time) return(model2gen(lambda = 10, gamma = 0.75, sigma = 2, tau = 10, Time = Time)))
plotautocov(Time = 200, n = 6, func = function(Time) return(model3gen(lambda = 10, gamma = 0.75, sigma = 2, tau = 10, Time = Time)))
plotautocov(Time = 200, n = 6, func = function(Time) return(model4gen(mu = 10, gamma = 0.75, sigma = 2, Time = Time)))
plotautocov <- function(Time, n, func){
# browser()
gen <- match.fun(func)
M <- NULL
for(k in 1:n){
series <- gen(Time)
M <- cbind(M, acf(series, type = "covariance", plot = F)$acf)
}
plot(x = 1:nrow(M), y = 1:nrow(M), 'n', ylim = 1.1*c(min(M), max(M)), xlab = "time lag", ylab = "autocovariance")
for(k in 1:n){
lines(x = 1:nrow(M), y = M[,k], col = k)
}
}
plotautocov(Time = 200, n = 6, func = function(Time) return(model1gen(lambda = 10, gamma = 0.75, sigma = 2, tau = 10, Time = Time)))
plotautocov(Time = 200, n = 6, func = function(Time) return(model2gen(lambda = 10, gamma = 0.75, sigma = 2, tau = 10, Time = Time)))
plotautocov(Time = 200, n = 6, func = function(Time) return(model3gen(lambda = 10, gamma = 0.75, sigma = 2, tau = 10, Time = Time)))
plotautocov(Time = 200, n = 6, func = function(Time) return(model4gen(mu = 10, gamma = 0.75, sigma = 2, Time = Time)))
plotseries(Time = 200, n = 6, func = function(Time) return(model3gen(lambda = 10, gamma = 0.75, sigma = 2, tau = 10, Time = Time)))
plotseries(Time = 200, n = 6, func = function(Time) return(model3gen(lambda = 10, gamma = 0.75, sigma = 2, tau = 10, Time = Time)))
