vp <- p*(1 - p)
w <- as.vector(n/(etap^2*vp))
z <- (y - p)*etap
xmata <- cbind(xmat, etap)
epsilon_n <- solve(t(xmata)%*%diag(w)%*%xmata)%*%t(xmata)%*%diag(w)%*%(xmata%*%epsilon + z)
if(sqrt(sum((epsilon_n - epsilon)^2)) < 1e-08)
break
inv_inf <- solve(xmata%*%diag(w)%*%xmata)
res <- list(epsilon = epsilon_n, inv_inf = inv_inf, estp = p)
return(res)
}
}
BlissFisher(data = series1, start = c(-60, 14, 1))
BlissFisher <- function(data, start){
browser()
n <- data$n
y <- data$y
logd <- data$logdose
xmat <- matrix(c(rep(1, length(logd)), logd), ncol = 2)
epsilon_n <- start
repeat {
epsilon <- epsilon_n
beta <- epsilon[1:2]
lambda <- epsilon[3]
eta <- xmat%*%beta
p <- 1 - (1 + exp(eta))^(-1/lambda)
etap <- lambda/((1 - p)*(1 - (1 - p)^lambda))
vp <- p*(1 - p)
w <- as.vector(n/(etap^2*vp))
z <- (y - p)*etap
xmata <- cbind(xmat, etap)
epsilon_n <- solve(t(xmata)%*%diag(w)%*%xmata)%*%t(xmata)%*%diag(w)%*%(xmata%*%epsilon + z)
if(sqrt(sum((epsilon_n - epsilon)^2)) < 1e-08)
break
}
inv_inf <- solve(xmata%*%diag(w)%*%xmata)
res <- list(epsilon = epsilon_n, inv_inf = inv_inf, estp = p)
return(res)
}
BlissFisher(data = series1, start = c(-60, 14, 1))
BlissFisher <- function(data, start){
browser()
n <- data$n
y <- data$y
logd <- data$logdose
xmat <- matrix(c(rep(1, length(logd)), logd), ncol = 2)
epsilon_n <- start
repeat {
epsilon <- epsilon_n
beta <- epsilon[1:2]
lambda <- epsilon[3]
eta <- xmat%*%beta
p <- 1 - (1 + exp(eta))^(-1/lambda)
etap <- lambda/((1 - p)*(1 - (1 - p)^lambda))
vp <- p*(1 - p)
w <- as.vector(n/(etap^2*vp))
z <- (y - p)*etap
xmata <- cbind(xmat, etap)
epsilon_n <- solve(t(xmata)%*%diag(w)%*%xmata)%*%t(xmata)%*%diag(w)%*%(xmata%*%epsilon + z)
if(sqrt(sum((epsilon_n - epsilon)^2)) < 1e-08)
break
}
inv_inf <- solve(t(xmata)%*%diag(w)%*%xmata)
res <- list(epsilon = epsilon_n, inv_inf = inv_inf, estp = p)
return(res)
}
BlissFisher <- function(data, start){
#browser()
n <- data$n
y <- data$y
logd <- data$logdose
xmat <- matrix(c(rep(1, length(logd)), logd), ncol = 2)
epsilon_n <- start
repeat {
epsilon <- epsilon_n
beta <- epsilon[1:2]
lambda <- epsilon[3]
eta <- xmat%*%beta
p <- 1 - (1 + exp(eta))^(-1/lambda)
etap <- lambda/((1 - p)*(1 - (1 - p)^lambda))
vp <- p*(1 - p)
w <- as.vector(n/(etap^2*vp))
z <- (y - p)*etap
xmata <- cbind(xmat, etap)
epsilon_n <- solve(t(xmata)%*%diag(w)%*%xmata)%*%t(xmata)%*%diag(w)%*%(xmata%*%epsilon + z)
if(sqrt(sum((epsilon_n - epsilon)^2)) < 1e-08)
break
}
inv_inf <- solve(t(xmata)%*%diag(w)%*%xmata)
res <- list(epsilon = epsilon_n, inv_inf = inv_inf, estp = p)
return(res)
}
series1bliss <- BlissFisher(data = series1, start = c(-60, 14, 1))
BlissFisher(data = series1, start = c(-60, 14, 1))
BlissFisher <- function(data, start){
browser()
n <- data$n
y <- data$y
logd <- data$logdose
xmat <- matrix(c(rep(1, length(logd)), logd), ncol = 2)
epsilon_n <- start
repeat {
epsilon <- epsilon_n
beta <- epsilon[1:2]
lambda <- epsilon[3]
eta <- xmat%*%beta
p <- 1 - (1 + exp(eta))^(-1/lambda)
etap <- lambda/((1 - p)*(1 - (1 - p)^lambda))
vp <- p*(1 - p)
w <- as.vector(n/(etap^2*vp))
z <- (y - p)*etap
xmata <- cbind(xmat, etap)
epsilon_n <- solve(t(xmata)%*%diag(w)%*%xmata)%*%t(xmata)%*%diag(w)%*%(xmata%*%epsilon + z)
if(sqrt(sum((epsilon_n - epsilon)^2)) < 1e-08)
break
}
inv_inf <- solve(t(xmata)%*%diag(w)%*%xmata)
res <- list(epsilon = epsilon_n, inv_inf = inv_inf, estp = p)
return(res)
}
series1bliss <- BlissFisher(data = series1, start = c(-60, 14, 1))
BlissFisher <- function(data, start){
browser()
n <- data$n
y <- data$y
logd <- data$logdose
xmat <- matrix(c(rep(1, length(logd)), logd), ncol = 2)
epsilon_n <- start
repeat {
epsilon <- epsilon_n
beta <- epsilon[1:2]
lambda <- epsilon[3]
eta <- xmat%*%beta
p <- 1 - (1 + exp(eta))^(-1/lambda)
etap <- lambda/((1 - p)*(1 - (1 - p)^lambda))
vp <- p*(1 - p)
w <- as.vector(n/(etap^2*vp))
z <- (y - p)*etap
xmata <- cbind(xmat, etap)
epsilon_n <- solve(t(xmata)%*%diag(w)%*%xmata)%*%t(xmata)%*%diag(w)%*%(xmata%*%epsilon + z)
if(sqrt(sum((epsilon_n - epsilon)^2)) < 1e-08)
break
}
inv_inf <- solve(t(xmata)%*%diag(w)%*%xmata)
res <- list(epsilon = epsilon_n, inv_inf = inv_inf, estp = p)
return(res)
}
series1bliss <- BlissFisher(data = series1, start = c(-60, 14, 1))
series1bliss <- BlissFisher(data = series1, start = c(-60, 14, 1))
BlissFisher <- function(data, start){
browser()
n <- data$n
y <- data$y
y[y==1] <- 1 - 0.00001
logd <- data$logdose
xmat <- matrix(c(rep(1, length(logd)), logd), ncol = 2)
epsilon_n <- start
repeat {
epsilon <- epsilon_n
beta <- epsilon[1:2]
lambda <- epsilon[3]
eta <- xmat%*%beta
p <- 1 - (1 + exp(eta))^(-1/lambda)
etap <- lambda/((1 - p)*(1 - (1 - p)^lambda))
vp <- p*(1 - p)
w <- as.vector(n/(etap^2*vp))
z <- (y - p)*etap
xmata <- cbind(xmat, etap)
epsilon_n <- solve(t(xmata)%*%diag(w)%*%xmata)%*%t(xmata)%*%diag(w)%*%(xmata%*%epsilon + z)
if(sqrt(sum((epsilon_n - epsilon)^2)) < 1e-08)
break
}
inv_inf <- solve(t(xmata)%*%diag(w)%*%xmata)
res <- list(epsilon = epsilon_n, inv_inf = inv_inf, estp = p)
return(res)
}
series1bliss <- BlissFisher(data = series1, start = c(-60, 14, 1))
series1bascglm
BlissFisher <- function(data, start){
browser()
n <- data$n
y <- data$y
y[y==1] <- 1 - 0.00001
logd <- data$logdose
xmat <- matrix(c(rep(1, length(logd)), logd), ncol = 2)
epsilon_n <- start
repeat {
epsilon <- epsilon_n
beta <- epsilon[1:2]
lambda <- epsilon[3]
eta <- xmat%*%beta
p <- 1 - (1 + lambda*exp(eta))^(-1/lambda)
etap <- lambda/((1 - p)*(1 - (1 - p)^lambda))
vp <- p*(1 - p)
w <- as.vector(n/(etap^2*vp))
z <- (y - p)*etap
xmata <- cbind(xmat, etap)
epsilon_n <- solve(t(xmata)%*%diag(w)%*%xmata)%*%t(xmata)%*%diag(w)%*%(xmata%*%epsilon + z)
if(sqrt(sum((epsilon_n - epsilon)^2)) < 1e-08)
break
}
inv_inf <- solve(t(xmata)%*%diag(w)%*%xmata)
res <- list(epsilon = epsilon_n, inv_inf = inv_inf, estp = p)
return(res)
}
series1bliss <- BlissFisher(data = series1, start = c(-60, 14, 1))
epsilon
epsilon_n
epsilon_n - epsilon
BlissFisher <- function(data, start){
browser()
n <- data$n
y <- data$y
y[y==1] <- 1 - 0.00001
logd <- data$logdose
xmat <- matrix(c(rep(1, length(logd)), logd), ncol = 2)
epsilon_n <- start
repeat {
epsilon <- epsilon_n
beta <- epsilon[1:2]
lambda <- epsilon[3]
eta <- xmat%*%beta
p <- 1 - (1 + lambda*exp(eta))^(-1/lambda)
etap <- lambda/((1 - p)*(1 - (1 - p)^lambda))
vp <- p*(1 - p)
w <- as.vector(n/(etap^2*vp))
z <- (y - p)*etap
xmata <- cbind(xmat, -etap)
epsilon_n <- solve(t(xmata)%*%diag(w)%*%xmata)%*%t(xmata)%*%diag(w)%*%(xmata%*%epsilon + z)
if(sqrt(sum((epsilon_n - epsilon)^2)) < 1e-08)
break
}
inv_inf <- solve(t(xmata)%*%diag(w)%*%xmata)
res <- list(epsilon = epsilon_n, inv_inf = inv_inf, estp = p)
return(res)
}
series1bliss <- BlissFisher(data = series1, start = c(-60, 14, 1))
epsilon
epsilon_n
epsilon - epsilon_n
(epsilon - epsilon_n)^2
sum((epsilon - epsilon_n)^2)
(epsilon - epsilon_n)^2[1]
(epsilon - epsilon_n)^2[,1]
(epsilon - epsilon_n)^2[1,]
(epsilon - epsilon_n)^2[1,1]
(epsilon - epsilon_n)^2[1]
(epsilon - epsilon_n)^2[2]
as.vector((epsilon - epsilon_n)^2)
sum(as.vector((epsilon - epsilon_n)^2))
as.vector((epsilon - epsilon_n)^2)[1]
BlissFisher <- function(data, start){
browser()
n <- data$n
y <- data$y
y[y==1] <- 1 - 0.00001
logd <- data$logdose
xmat <- matrix(c(rep(1, length(logd)), logd), ncol = 2)
epsilon_n <- start
repeat {
epsilon <- epsilon_n
beta <- epsilon[1:2]
lambda <- epsilon[3]
eta <- xmat%*%beta
p <- 1 - (1 + lambda*exp(eta))^(-1/lambda)
etap <- lambda/((1 - p)*(1 - (1 - p)^lambda))
vp <- p*(1 - p)
w <- as.vector(n/(etap^2*vp))
z <- (y - p)*etap
etalambda <- -log(1 - p)/(1 - (1 - p)^lambda) - 1/lambda
xmata <- cbind(xmat, -etalambda)
epsilon_n <- solve(t(xmata)%*%diag(w)%*%xmata)%*%t(xmata)%*%diag(w)%*%(xmata%*%epsilon + z)
if(sqrt(sum((epsilon_n - epsilon)^2)) < 1e-08)
break
}
inv_inf <- solve(t(xmata)%*%diag(w)%*%xmata)
res <- list(epsilon = epsilon_n, inv_inf = inv_inf, estp = p)
return(res)
}
series1bliss <- BlissFisher(data = series1, start = c(-60, 14, 1))
series1bliss <- BlissFisher(data = series1, start = c(-40, 9, -0.001))
series1bliss <- BlissFisher(data = series1, start = c(-40, 9, -0.006))
beta[1] + beta[2]*logd
p
w
z
xmata
etalambda
BlissFisher <- function(data, start){
browser()
n <- data$n
y <- data$y
y[y==1] <- 1 - 0.00001
logd <- data$logdose
xmat <- matrix(c(rep(1, length(logd)), logd), ncol = 2)
epsilon_n <- start
repeat {
epsilon <- epsilon_n
beta <- epsilon[1:2]
lambda <- epsilon[3]
eta <- xmat%*%beta
p <- 1 - (1 + lambda*exp(eta))^(-1/lambda)
etap <- lambda/((1 - p)*(1 - (1 - p)^lambda))
vp <- p*(1 - p)
w <- as.vector(n/(etap^2*vp))
z <- (y - p)*etap
etalambda <- -log(1 - p)/(1 - (1 - p)^lambda) - 1/lambda
xmata <- cbind(xmat, -etalambda)
epsilon_n <- solve(t(xmata)%*%diag(w)%*%xmata)%*%t(xmata)%*%diag(w)%*%z + epsilon
if(sqrt(sum((epsilon_n - epsilon)^2)) < 1e-08)
break
}
inv_inf <- solve(t(xmata)%*%diag(w)%*%xmata)
res <- list(epsilon = epsilon_n, inv_inf = inv_inf, estp = p)
return(res)
}
series1bliss <- BlissFisher(data = series1, start = c(-39, 9.5, -0.006))
z
series1bliss
BlissFisher <- function(data, start){
#browser()
n <- data$n
y <- data$y
y[y==1] <- 1 - 0.00001
logd <- data$logdose
xmat <- matrix(c(rep(1, length(logd)), logd), ncol = 2)
epsilon_n <- start
repeat {
epsilon <- epsilon_n
beta <- epsilon[1:2]
lambda <- epsilon[3]
eta <- xmat%*%beta
p <- 1 - (1 + lambda*exp(eta))^(-1/lambda)
etap <- lambda/((1 - p)*(1 - (1 - p)^lambda))
vp <- p*(1 - p)
w <- as.vector(n/(etap^2*vp))
z <- (y - p)*etap
etalambda <- -log(1 - p)/(1 - (1 - p)^lambda) - 1/lambda
xmata <- cbind(xmat, -etalambda)
epsilon_n <- solve(t(xmata)%*%diag(w)%*%xmata)%*%t(xmata)%*%diag(w)%*%z + epsilon
if(sqrt(sum((epsilon_n - epsilon)^2)) < 1e-08)
break
}
inv_inf <- solve(t(xmata)%*%diag(w)%*%xmata)
res <- list(epsilon = epsilon_n, inv_inf = inv_inf, estp = p)
return(res)
}
series1bliss <- BlissFisher(data = series1, start = c(-60, 14, 1))
series1bliss <- BlissFisher(data = series1, start = c(-39, 9.5, -0.006))
series1bliss <- BlissFisher(data = series1, start = c(-40, 10, -0.006))
series1bliss <- BlissFisher(data = series1, start = c(-39, 9.5, -0.006))
series2bliss <- BlissFisher(data = series2, start = c(-39, 9.5, -0.006))
series2bliss
series1bascglm$vals$muhat
series1bliss$estp
series1bascglm$estb
series1bliss <- BlissFisher(data = series1, start = c(-60.5346, 14.84114, 1))
series1bliss
series1bliss <- BlissFisher(data = series1, start = c(-61, 14, 1))
series1bliss <- BlissFisher(data = series1, start = c(-60.5346, 14.84114, 1))
series2bliss <- BlissFisher(data = series2, start = c(-41.5671, 10.074929, 0.114924))
series2bliss
seriestotalbliss <- BlissFisher(data = total, start = c(-41.5671, 10.074929, 0.114924))
seriestotalbliss
seriestotalbliss <- BlissFisher(data = total, start = c(-39, 9.5, -0.006))
seriestotalbliss
order(c(1,3,2,4,5,1))
order(c(1,3,2,4,5,6))
series1bascglm
pbscseries1 <- series1bascglm$vals$muhat
series1$n*(y*log(pbscseries1) + (1 - y)*log(1 - pbscseries1))
sum(series1$n*(series1$y*log(pbscseries1) + (1 - series1$y)*log(1 - pbscseries1)))
series1$n*series1$y
round(series1$n*series1$y)
round(series1$n*series1$y)/series1$n
28*0.329
9/28
pbinom(6.99, size = 28, prob = series1bliss$estp[3])
series1bliss$estp
series1bliss$estp[3]
pbinom(7, size = 28, prob = series1bliss$estp[3])
pbinom(8, size = 28, prob = series1bliss$estp[3])
?binom
?pbinom
pbinom(6, size = 28, prob = series1bliss$estp[3])
pbinom(6.99, size = 28, prob = series1bliss$estp[3])
pbinom(7, size = 28, prob = series1bliss$estp[3])
BlissFisher <- function(data, start){
#browser()
n <- data$n
y <- data$y
y[y==1] <- 1 - 0.00001
logd <- data$logdose
xmat <- matrix(c(rep(1, length(logd)), logd), ncol = 2)
epsilon_n <- start
repeat {
epsilon <- epsilon_n
beta <- epsilon[1:2]
lambda <- epsilon[3]
eta <- xmat%*%beta
p <- 1 - (1 + lambda*exp(eta))^(-1/lambda)
etap <- lambda/((1 - p)*(1 - (1 - p)^lambda))
vp <- p*(1 - p)
w <- as.vector(n/(etap^2*vp))
z <- (y - p)*etap
etalambda <- -log(1 - p)/(1 - (1 - p)^lambda) - 1/lambda
xmata <- cbind(xmat, -etalambda)
epsilon_n <- solve(t(xmata)%*%diag(w)%*%xmata)%*%t(xmata)%*%diag(w)%*%z + epsilon
if(sqrt(sum((epsilon_n - epsilon)^2)) < 1e-08)
break
}
inv_inf <- solve(t(xmata)%*%diag(w)%*%xmata)
loglik <- n*(y*log(p) + (1 - y)*log(1 - p))
res <- list(epsilon = epsilon_n, inv_inf = inv_inf, estp = p, loglik = loglik)
return(res)
}
series1bliss <- BlissFisher(data = series1, start = c(-60.5346, 14.84114, 1))
series2bliss <- BlissFisher(data = series2, start = c(-41.5671, 10.074929, 0.114924))
seriestotalbliss <- BlissFisher(data = seriestotal, start = c(-41.5671, 10.074929, 0.114924))
seriestotalbliss <- BlissFisher(data = total, start = c(-41.5671, 10.074929, 0.114924))
seriestotalbliss
BlissFisher <- function(data, start){
#browser()
n <- data$n
y <- data$y
y[y==1] <- 1 - 0.00001
logd <- data$logdose
xmat <- matrix(c(rep(1, length(logd)), logd), ncol = 2)
epsilon_n <- start
repeat {
epsilon <- epsilon_n
beta <- epsilon[1:2]
lambda <- epsilon[3]
eta <- xmat%*%beta
p <- 1 - (1 + lambda*exp(eta))^(-1/lambda)
etap <- lambda/((1 - p)*(1 - (1 - p)^lambda))
vp <- p*(1 - p)
w <- as.vector(n/(etap^2*vp))
z <- (y - p)*etap
etalambda <- -log(1 - p)/(1 - (1 - p)^lambda) - 1/lambda
xmata <- cbind(xmat, -etalambda)
epsilon_n <- solve(t(xmata)%*%diag(w)%*%xmata)%*%t(xmata)%*%diag(w)%*%z + epsilon
if(sqrt(sum((epsilon_n - epsilon)^2)) < 1e-08)
break
}
inv_inf <- solve(t(xmata)%*%diag(w)%*%xmata)
loglik <- sum(n*(y*log(p) + (1 - y)*log(1 - p)))
res <- list(epsilon = epsilon_n, inv_inf = inv_inf, estp = p, loglik = loglik)
return(res)
}
seriestotalbliss <- BlissFisher(data = total, start = c(-41.5671, 10.074929, 0.114924))
series2bliss <- BlissFisher(data = series2, start = c(-41.5671, 10.074929, 0.114924))
series1bliss <- BlissFisher(data = series1, start = c(-60.5346, 14.84114, 1))
series2bliss
series1bliss
seriestotalbliss
series1bascglm
series1bliss
-2*(-88.66651 - (-89.93966))
1 - pchisq(2.5463, df = 1)
series2bascglm
series2bliss
-2*(-95.58295 - (-93.46301))
1 - pchisq(4.23988, df = 1)
seriestotalbliss
-2*(-182.3335 - (-93.46301) - (-88.66651))
1 - pchisq(0.40796, df = 3)
plot(x = total$dose, y = total$y, xlab = "dose", ylab = "y")
plot(x = total$dose, y = total$y, xlab = "dose", ylab = "y", xlim = c(49, 77))
beta <- seriestotalbliss$epsilon[1:2]
lambda <- seriestotalbliss$epsilon[3]
dose <- seq(49, 77, 0.1)
dose
y <- 1 - (1 + lambda*exp(beta[1] + beta[2]*log(dose)))^(-1/lambda)
lines(x = dose, y = y)
x <- seq(0.1, 80, 0.1)
g <- (beta[2]*exp(beta[1] + beta[2]*log(x)))/(x*(1 + lambda*exp(beta[1]+beta[2]*log(x)))^(1 + 1/lambda))
plot(x = x, y = g, 'n')
lines(x=x, y = g)
par(xlab = "Tolerance (dose)", ylab = "Density")
plot(xlab = "Tolerance (dose)", ylab = "Density")
plot(x = x, y = g, 'n', xlab = "Tolerance (dose)", ylab = "Density")
lines(x=x, y = g)
x <- seq(0.1, 100, 0.1)
g <- (beta[2]*exp(beta[1] + beta[2]*log(x)))/(x*(1 + lambda*exp(beta[1]+beta[2]*log(x)))^(1 + 1/lambda))
plot(x = x, y = g, 'n', xlab = "Tolerance (dose)", ylab = "Density")
lines(x=x, y = g)
plot(x = total$dose, y = total$y, xlab = "Dose", ylab = "Response")
lines(x = dose, y = y)
total$response <- round(total$n*total$y)
total
u <- rep(0, nrow(total))
u
for(i in 1:nrow(total)){
u[i] <- pbinom(total$response[i], size = total$n, prob = seriestotalbliss$estp[i])
}
warnings()
u
i <- 1
pbinom(total$response[i], size = total$n, prob = seriestotalbliss$estp[i]
)
u <- rep(0, nrow(total))
for(i in 1:nrow(total)){
u[i] <- pbinom(total$response[i], size = total$n[i], prob = seriestotalbliss$estp[i])
}
u
plot(x = (1:length(u))/(length(u)+1), y = u[order(u)])
plot(x = (1:length(u))/(length(u)+1), y = u[order(u)], xlab = "x", ylab = "y")
?abline
abline(a = 0, b = 1)
plot(x = (1:length(u))/(length(u)+1), y = u[order(u)], xlab = "x", ylab = "y", xlim = c(0,1), ylim = c(0,1))
abline(a = 0, b = 1)
