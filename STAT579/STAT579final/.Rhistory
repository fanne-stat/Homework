hourbartheta <- hourbar * pi /12
xhourbar <- cos(hourbartheta)
yhourbar <- sin(hourbartheta)
plot(x = x, y = y, xlim = c(-1.3, 1.3), ylim = c(-1.3, 1.3), col = col[1], pch = pch[1], xlab = "", ylab = "" , ...)
text(x = x, y = y, data, col = col[1], cex = 0.6, pos = 4)
points(x = xhourbar, y = yhourbar, col = col[2], pch = pch[2], ...)
text(x = xhourbar, y = yhourbar, hourbar, col = col[2], pch = pch[2], cex = 0.6, pos = 1)
}
display.average(data = hour, col = c("blue", "red"), pch = c(1,4))
options(digits = 3)
display.average <- function(data, col, pch, ...){
theta <- data * pi /12
x <- cos(theta)
y <- sin(theta)
hourbar <- circ.mean(data = data, input.type = "hour")
hourbartheta <- hourbar * pi /12
xhourbar <- cos(hourbartheta)
yhourbar <- sin(hourbartheta)
plot(x = x, y = y, xlim = c(-1.3, 1.3), ylim = c(-1.3, 1.3), col = col[1], pch = pch[1], xlab = "", ylab = "" , ...)
text(x = x, y = y, data, col = col[1], cex = 0.6, pos = 4)
points(x = xhourbar, y = yhourbar, col = col[2], pch = pch[2], ...)
text(x = xhourbar, y = yhourbar, hourbar, col = col[2], pch = pch[2], cex = 0.6, pos = 1)
}
display.average(data = hour, col = c("blue", "red"), pch = c(1,4))
exp(1)
?besselI
besselI(1)
fhour <- function(hour, mu, kappa, log = FALSE){
theta <- hour * pi / 12
f <- exp(kappa * cos(theta - mu)) / (2 * pi * besselI(kappa, nu = 0))
ifelse(!log, f, log(f))
}
?optimize
# estimate the parameter mu (in hour)
mu <- circ.mean(hour, input.type = "hour")
kappa <- optimize(f = fhour, mu = mu, hour = hour, maximum = T, low = 0.0001)
# estimate the parameter mu (in hour)
mu <- circ.mean(hour, input.type = "hour")
kappa <- optimize(f = fhour, mu = mu, hour = hour, maximum = T, interval = c(0.001, Inf), low = 0.001)
# estimate the parameter mu (in hour)
mu <- circ.mean(hour, input.type = "hour")
kappa <- optimize(f = fhour, mu = mu, hour = hour, maximum = T, interval = c(0.001, 100), low = 0.001)
# estimate the parameter mu (in hour)
mu <- circ.mean(hour, input.type = "hour")
kappa <- optimize(f = fhour, mu = mu, hour = hour, maximum = T, interval = c(0.001, 100), lower = 0.001)
kappa
# estimate the parameter mu (in hour)
mu <- circ.mean(hour, input.type = "hour")
kappa <- optimize(f = fhour, mu = mu, hour = hour, maximum = T, interval = c(0.001, 1000), lower = 0.001)
kappa
# the log likelihood function l
l <- function(hour, mu, kappa){
sum(fhour(hour = hour, mu = mu, kappa = kappa, log = T))
}
# estimate the parameter mu (in hour)
mu <- circ.mean(hour, input.type = "hour")
kappa <- optimize(f = l, mu = mu, hour = hour, maximum = T, interval = c(0.001, 1000), lower = 0.001)
kappa
l(hour, mu = mu, kappa = 69)
# the log likelihood function l
l <- function(hour, mu, kappa){
sum(fhour(hour = hour, mu = mu, kappa = kappa, log = T))
}
# estimate the parameter mu (in hour)
mu <- circ.mean(hour, input.type = "hour")
mu
kappa <- optimize(f = l, mu = mu, hour = hour, maximum = T, interval = c(0.001, 1000), lower = 0.001)
kappa
fhour(hour = hour, mu = mu, kappa = 69, log = T)
hour
fhour <- function(hour, mu, kappa, log = FALSE){
browser()
theta <- hour * pi / 12
thetamu <- mu * pi / 12
f <- exp(kappa * cos(theta - thetamu)) / (2 * pi * besselI(kappa, nu = 0))
ifelse(!log, f, log(f))
}
fhour(hour = hour , mu = mu, kappa = 69)
fhour(hour = hour , mu = mu, kappa = 69)
fhour <- function(hour, mu, kappa, log = FALSE){
browser()
theta <- hour * pi / 12
thetamu <- mu * pi / 12
f <- exp(kappa * cos(theta - thetamu)) / (2 * pi * besselI(kappa, nu = 0))
if (!log) f else log(f)
}
fhour(hour = hour , mu = mu, kappa = 69)
fhour(hour = hour , mu = mu, kappa = 69, log = T)
fhour <- function(hour, mu, kappa, log = FALSE){
theta <- hour * pi / 12
thetamu <- mu * pi / 12
f <- exp(kappa * cos(theta - thetamu)) / (2 * pi * besselI(kappa, nu = 0))
if (!log) f else log(f)
}
# the log likelihood function l
l <- function(hour, mu, kappa){
sum(fhour(hour = hour, mu = mu, kappa = kappa, log = T))
}
# estimate the parameter mu (in hour)
mu <- circ.mean(hour, input.type = "hour")
mu
kappa <- optimize(f = l, mu = mu, hour = hour, maximum = T, interval = c(0.001, 1000), lower = 0.001)
kappa
fhour(hour = hour , mu = mu, kappa = 1.65, log = T)
besselI(1.64, mu = 0)
besselI(1.64, nu = 0)
fhour(hour = hour , mu = mu, kappa = 1.65)
atan2(x = 1, y = -1)
atan2(1,-1)
atan(x = c(1,-1), y = c(-1,1))
atan2(x = c(1,-1), y = c(-1,1))
rVM <- function(mu, kappa, n){
nuC <- cos(mu)
nuS <- sin(mu)
sigma <- 1 / sqrt(kappa)
X1 <- rnorm(n = n, mean = nuC, sd = sigma)
X2 <- rnorm(n= n, mean = nuS, sd = sigma)
r <- sqrt(X^2 + X^2)
Y1 <- X1 / r
Y2 <- X2 / r
theta <- atan2(x = Y1 , y = Y2)
ifelse(theta >= 0, theta, theta + 2*pi)
}
atan2(-0.5, 0.5)
rVM <- function(mu, kappa, n){
nuC <- cos(mu)
nuS <- sin(mu)
sigma <- 1 / sqrt(kappa)
X <- rnorm(n = n*2, mean = nuC, sd = sigma)
dim(X) <- c(n,2)
X[,1] <- X[,1] + nuC
X[,2] <- X[,2] + nuS
X <- X / sigma
apply(X = X, MARGIN = 1, FUN = function(x,y) atan2(y,x))
}
thetabar <- circ.mean(hour, input.type = "hour")*pi/12
teststat <- cos(thetabar - 0)
teststat
kappahat <- kappa$maximum
B <- 1000
simulationnum <- 1:B
simulation <- lapply(simulationnum, FUN =rVM)
kappahat <- kappa$maximum
B <- 1000
simulationnum <- 1:B
simulation <- lapply(simulationnum, FUN =rVM, mu = 0, kappa = kappahat, n = 100)
rVM(mu = 0, kappa = kappahat, n = 100)
rVM <- function(mu, kappa, n){
nuC <- cos(mu)
nuS <- sin(mu)
sigma <- 1 / sqrt(kappa)
X <- rnorm(n = n*2, mean = nuC, sd = sigma)
dim(X) <- c(n,2)
X[,1] <- X[,1] + nuC
X[,2] <- X[,2] + nuS
X <- X / sigma
apply(X = X, MARGIN = 1, FUN = function(x) atan2(x[2], x[1]))
}
rVM(mu = 0, kappa = kappahat, n = 100)
kappahat <- kappa$maximum
B <- 1000
simulationnum <- 1:B
simulation <- lapply(simulationnum, FUN =rVM, mu = 0, kappa = kappahat, n = 100)
lapply(simulationnum, FUN = rnorm, n = 10)
kappahat <- kappa$maximum
B <- 1000
simulationnum <- rep(0, 1000)
simulation <- lapply(simulationnum, FUN =rVM,  kappa = kappahat, n = 100)
kappahat <- kappa$maximum
B <- 1000
simulationnum <- rep(0, 1000)
simulation <- lapply(simulationnum, FUN =rVM,  kappa = kappahat, n = 100)
teststat.sample <- lapply(simulation, FUN = function(x) cos(circ.mean(hour = x, input.type = "radian")))
kappahat <- kappa$maximum
B <- 1000
simulationnum <- rep(0, 1000)
simulation <- lapply(simulationnum, FUN =rVM,  kappa = kappahat, n = 100)
teststat.sample <- lapply(simulation, FUN = function(x) cos(circ.mean(hour = x, input.type = "radian")))
kappahat <- kappa$maximum
B <- 1000
simulationnum <- rep(0, 1000)
simulation <- lapply(simulationnum, FUN =rVM,  kappa = kappahat, n = 100)
teststat.sample <- lapply(simulation, FUN = function(x) cos(circ.mean(data = x, input.type = "radian")))
xxx <- teststat.sample > teststat
sum(xxx)
as.vector(teststat.sample)
unlist(teststat.sample)
xxx <- (unlist(teststat.sample) > teststat)
sum(xxx)
unique(xxx)
kappahat <- kappa$maximum
B <- 1000
simulationnum <- rep(0, 1000)
simulation <- lapply(simulationnum, FUN =rVM,  kappa = kappahat, n = 100)
teststat.sample <- lapply(simulation, FUN = function(x) cos(circ.mean(data = x, input.type = "radian")))
pvalue <- sum(unlist(teststat.sample) > teststat)/B
pvalue
hist(unlist(teststat.sample))
kappahat <- kappa$maximum
B <- 10000
simulationnum <- rep(0, B)
simulation <- lapply(simulationnum, FUN =rVM,  kappa = kappahat, n = 100)
teststat.sample <- lapply(simulation, FUN = function(x) cos(circ.mean(data = x, input.type = "radian")))
pvalue <- sum(unlist(teststat.sample) > teststat)/B
pvalue
hist(unlist(teststat.sample))
thetabar <- circ.mean(hour, input.type = "hour")*pi/12
teststat <- cos(thetabar - 23*pi/24)
teststat
thetabar <- circ.mean(hour, input.type = "hour")*pi/12
teststat <- cos(thetabar - 23*pi/12)
teststat
kappahat <- kappa$maximum
B <- 1000
simulationnum <- rep(0, B)
simulation <- lapply(simulationnum, FUN =rVM,  kappa = kappahat, n = 100)
teststat.sample <- lapply(simulation, FUN = function(x) cos(circ.mean(data = x, input.type = "radian") - 23*pi/12))
pvalue <- sum(unlist(teststat.sample) > teststat)/B
pvalue
thetabar <- circ.mean(hour, input.type = "hour")*pi/12
teststat <- cos(thetabar - 0)
teststat
kappahat <- kappa$maximum
B <- 1000
simulationnum <- rep(0, B)
simulation <- lapply(simulationnum, FUN =rVM,  kappa = kappahat, n = 100)
teststat.sample <- lapply(simulation, FUN = function(x) cos(circ.mean(data = x, input.type = "radian") - 0))
pvalue <- sum(unlist(teststat.sample) > teststat)/B
pvalue
rVM <- function(mu, kappa, n){
browser()
nuC <- cos(mu)
nuS <- sin(mu)
sigma <- 1 / sqrt(kappa)
X <- rnorm(n = n*2, mean = nuC, sd = sigma)
dim(X) <- c(n,2)
X[,1] <- X[,1] + nuC
X[,2] <- X[,2] + nuS
X <- X / sigma
apply(X = X, MARGIN = 1, FUN = function(x) atan2(x[2], x[1]))
}
rVM(0, 1.65, 100)
X
X
X
read.csv(file = "brenda.csv")
score <- read.csv(file = "brenda.csv")
score <- read.csv(file = "brenda.csv")
plot(x = score$Time, ylim = c(0.5, 0.8), "n")
score <- read.csv(file = "brenda.csv")
plot(x = score$Time, y = score$Time , ylim = c(0.5, 0.8), "n")
score <- read.csv(file = "brenda.csv")
plot(x = score$Time, y = score$Time , ylim = c(0.5, 0.8), "n", xlab = "Time", ylab = "Score")
lines(x = score$Time, y = score$Trained, col = "red")
lines(x = score$Time, y = score$Repeated, col = "blue")
score <- read.csv(file = "brenda.csv")
plot(x = score$Time, y = score$Time , ylim = c(0.5, 0.8), "n", xlab = "Time", ylab = "Score")
lines(x = score$Time, y = score$Trained, col = "red", pch = 10)
lines(x = score$Time, y = score$Repeated, col = "blue", pchhi = 11)
score <- read.csv(file = "brenda.csv")
plot(x = score$Time, y = score$Time , ylim = c(0.5, 0.8), "n", xlab = "Time", ylab = "Score")
lines(x = score$Time, y = score$Trained, col = "red", pch = 10)
lines(x = score$Time, y = score$Repeated, col = "blue", pch = 11)
score <- read.csv(file = "brenda.csv")
plot(x = score$Time, y = score$Time , ylim = c(0.5, 0.8), "n", xlab = "Time", ylab = "Score")
lines(x = score$Time, y = score$Trained, col = "red", pch = 10)
lines(x = score$Time, y = score$Repeated, col = "blue", pch = 11)
plot(x = score$Time, y = score$Time , ylim = c(0.5, 0.8), "n", xlab = "Time", ylab = "Score")
lines(x = score$Time, y = score$Trained, col = "red", pch = 10, lty = 1)
lines(x = score$Time, y = score$Repeated, col = "blue", pch = 11, lty = 2)
lines(x = score$Time, y = score$Trained, col = "red", pch = 10, lty = 1, type = "b")
lines(x = score$Time, y = score$Repeated, col = "blue", pch = 11, lty = 2, type = "b")
score <- read.csv(file = "brenda.csv")
plot(x = score$Time, y = score$Time , ylim = c(0.5, 0.8), "n", xlab = "Time", ylab = "Score")
lines(x = score$Time, y = score$Trained, col = "red", pch = 10, lty = 1, type = "b")
lines(x = score$Time, y = score$Repeated, col = "blue", pch = 11, lty = 2, type = "b")
score <- read.csv(file = "brenda.csv")
plot(x = score$Time, y = score$Time , ylim = c(0.5, 0.8), "n", xlab = "Time", ylab = "Score")
lines(x = score$Time, y = score$Trained, col = "red", pch = 10, lty = 1, type = "b")
lines(x = score$Time, y = score$Repeated, col = "blue", pch = 12, lty = 1, type = "b")
score <- read.csv(file = "brenda.csv")
plot(x = score$Time, y = score$Time , ylim = c(0.5, 0.8), "n", xlab = "Time", ylab = "Score")
lines(x = score$Time, y = score$Trained, col = "red", pch = 10, lty = 1, type = "b")
lines(x = score$Time, y = score$Repeated, col = "blue", pch = 2, lty = 1, type = "b")
score <- read.csv(file = "brenda.csv")
plot(x = score$Time, y = score$Time , ylim = c(0.5, 0.8), "n", xlab = "Time", ylab = "Score")
lines(x = score$Time, y = score$Trained, col = "red", pch = 10, lty = 1, type = "b")
lines(x = score$Time, y = score$Repeated, col = "blue", pch = 3, lty = 1, type = "b")
score <- read.csv(file = "brenda.csv")
plot(x = score$Time, y = score$Time , ylim = c(0.5, 0.8), "n", xlab = "Time", ylab = "Score")
lines(x = score$Time, y = score$Trained, col = "red", pch = 10, lty = 1, type = "b")
lines(x = score$Time, y = score$Repeated, col = "blue", pch = 4, lty = 1, type = "b")
score <- read.csv(file = "brenda.csv")
plot(x = score$Time, y = score$Time , ylim = c(0.5, 0.8), "n", xlab = "Time", ylab = "Score")
lines(x = score$Time, y = score$Trained, col = "red", pch = 10, lty = 1, type = "b")
lines(x = score$Time, y = score$Repeated, col = "blue", pch = 5, lty = 1, type = "b")
score <- read.csv(file = "brenda.csv")
plot(x = score$Time, y = score$Time , ylim = c(0.5, 0.8), "n", xlab = "Time", ylab = "Score")
lines(x = score$Time, y = score$Trained, col = "red", pch = 10, lty = 1, type = "b")
lines(x = score$Time, y = score$Repeated, col = "blue", pch = 18, lty = 1, type = "b")
score <- read.csv(file = "brenda.csv")
plot(x = score$Time, y = score$Time , ylim = c(0.5, 0.8), "n", xlab = "Time", ylab = "Score")
lines(x = score$Time, y = score$Trained, col = "red", pch = 20, lty = 1, type = "b")
lines(x = score$Time, y = score$Repeated, col = "blue", pch = 18, lty = 1, type = "b")
score[,2:3]
apply(score, MARGIN = 1, FUN = function(x) lines(x = c(x[1], x[1]), y = c(x[2],x[3]), lty = 2))
legend(2, 0.55, c("Trained", "Repeated"), col = c("red","blue"), pch = c(20, 18))
legend(2, 0.55, c("Trained", "Repeated"), col = c("red","blue"), pch = c(20, 18), lty = 1)
theatabar
thetabar
lapply(1:100, rnorm(n = 100, mean = 0, sd = 1))
lapply(1:100, function(x) rnorm(n = 100, mean = 0, sd = 1))
kappahat <- kappa$maximum
B <- 1000
simulationnum <- rep(0, B)
#simulation <- lapply(simulationnum, FUN =rVM,  kappa = kappahat, n = 100)
simulation <- lapply(simulationnum, FUN =function(i) rVM(mu = 0, kappa = kappahat, n = 100))
teststat.sample <- lapply(simulation, FUN = function(x) cos(circ.mean(data = x, input.type = "radian") - 0))
pvalue <- sum(unlist(teststat.sample) > teststat)/B
pvalue
lapply(1:100, function(x) rnorm(n = 100, mean = 0, sd = 1))
kappahat <- kappa$maximum
B <- 1000
simulationnum <- rep(0, B)
#simulation <- lapply(simulationnum, FUN =rVM,  kappa = kappahat, n = 100)
simulation <- lapply(simulationnum, FUN =function(i) rVM(mu = 0, kappa = kappahat, n = 100))
teststat.sample <- lapply(simulation, FUN = function(x) cos(circ.mean(data = x, input.type = "radian") - 0))
pvalue <- sum(unlist(teststat.sample) > teststat)/B
pvalue
kappahat <- kappa$maximum
B <- 1000
simulationnum <- rep(0, B)
#simulation <- lapply(simulationnum, FUN =rVM,  kappa = kappahat, n = 100)
simulation <- lapply(simulationnum, FUN =function(i) rVM(mu = 0, kappa = kappahat, n = 100))
teststat.sample <- lapply(simulation, FUN = function(x) cos(circ.mean(data = x, input.type = "radian") - 0))
pvalue <- sum(unlist(teststat.sample) > teststat)/B
pvalue
rVM <- function(mu, kappa, n){
nuC <- cos(mu)
nuS <- sin(mu)
sigma <- 1 / sqrt(kappa)
X <- rnorm(n = n*2, mean = nuC, sd = sigma)
dim(X) <- c(n,2)
X[,1] <- X[,1] + nuC
X[,2] <- X[,2] + nuS
X <- X / sigma
apply(X = X, MARGIN = 1, FUN = function(x) atan2(x[2], x[1]))
}
kappahat <- kappa$maximum
B <- 1000
simulationnum <- rep(0, B)
simulation <- lapply(simulationnum, FUN =rVM,  kappa = kappahat, n = 100)
teststat.sample <- lapply(simulation, FUN = function(x) cos(circ.mean(data = x, input.type = "radian") - 0))
pvalue <- sum(unlist(teststat.sample) > teststat)/B
pvalue
rVM
rVM <- function(mu, kappa, n){
nuC <- cos(mu)
nuS <- sin(mu)
sigma <- 1 / sqrt(kappa)
X <- rnorm(n = n*2, mean = nuC, sd = sigma)
dim(X) <- c(n,2)
X[,1] <- X[,1] + nuC
X[,2] <- X[,2] + nuS
X <- X / sigma
apply(X = X, MARGIN = 1, FUN = function(x) atan2(x[2], x[1]))
}
rVM
kappahat <- kappa$maximum
B <- 1000
simulationnum <- rep(0, B)
simulation <- lapply(simulationnum, FUN =rVM,  kappa = kappahat, n = 100)
teststat.sample <- lapply(simulation, FUN = function(x) cos(circ.mean(data = x, input.type = "radian") - 0))
pvalue <- sum(unlist(teststat.sample) > teststat)/B
pvalue
logit <- data.frame(Time = score$Time, Trained = log(score$Trained/(1 - score$Trained)), Repeated = log(score$Repeated/(1 - score$Repeated)))
logit
score
log(0.941/(1-0.941))
log(score$Repeated/(1-score$Repeated))
log(0.719/(1-0.719))
teststat
min(teststat.sample)
min(unlist(teststat.sample))
max(unlist(teststat.sample))
length(teststat.sample)
diff <- logit$Trained - logit$Repeated
rVM <- function(mu, kappa, n){
nuC <- cos(mu)
nuS <- sin(mu)
sigma <- 1 / sqrt(kappa)
X <- rnorm(n = n*2, mean = nuC, sd = sigma)
dim(X) <- c(n,2)
X[,1] <- X[,1] + nuC
X[,2] <- X[,2] + nuS
X <- X * sigma
apply(X = X, MARGIN = 1, FUN = function(x) atan2(x[2], x[1]))
}
thetabar <- circ.mean(hour, input.type = "hour")*pi/12
teststat <- cos(thetabar - 0)
teststat
kappahat <- kappa$maximum
B <- 1000
simulationnum <- rep(0, B)
simulation <- lapply(simulationnum, FUN =rVM,  kappa = kappahat, n = 100)
teststat.sample <- lapply(simulation, FUN = function(x) cos(circ.mean(data = x, input.type = "radian") - 0))
pvalue <- sum(unlist(teststat.sample) > teststat)/B
pvalue
max(teststat.sample)
max((unlist(teststat.sample))
)
logit <- data.frame(logit, Difference = diff)
logit
lmest <- lm(formula = Difference ~ Time, data = logit)
summary(lmtest)
summary(lmest)
lmest
lmest$residuals
plot(x = lmest$fitted.values, y = lmest$residuals)
rstudent(lmest)
plot(x = rstudent(lmest), y = lmest$residuals)
plot(x = lmest$fitted.values, y = rstudent(lmest), xlab = "Fitted Value", ylab = "Studentized Residual")
rVM <- function(mu, kappa, n){
nuC <- cos(mu)
nuS <- sin(mu)
sigma <- 1 / sqrt(kappa)
X <- rnorm(n = n*2, mean = nuC, sd = sigma)
dim(X) <- c(n,2)
X <- X * sigma
X[,1] <- X[,1] + nuC
X[,2] <- X[,2] + nuS
apply(X = X, MARGIN = 1, FUN = function(x) atan2(x[2], x[1]))
}
thetabar <- circ.mean(hour, input.type = "hour")*pi/12
teststat <- cos(thetabar - 0)
teststat
kappahat <- kappa$maximum
B <- 1000
simulationnum <- rep(0, B)
simulation <- lapply(simulationnum, FUN =rVM,  kappa = kappahat, n = 100)
teststat.sample <- lapply(simulation, FUN = function(x) cos(circ.mean(data = x, input.type = "radian") - 0))
pvalue <- sum(unlist(teststat.sample) > teststat)/B
pvalue
max(teststat.sample)
max(unlist(teststat.sample))
rVM <- function(mu, kappa, n){
nuC <- cos(mu)
nuS <- sin(mu)
sigma <- 1 / sqrt(kappa)
X <- rnorm(n = n*2, mean = nuC, sd = sigma)
dim(X) <- c(n,2)
X <- X * sigma
X[,1] <- X[,1] + nuC
X[,2] <- X[,2] + nuS
atan2(x[,2], x[,1])
}
thetabar <- circ.mean(hour, input.type = "hour")*pi/12
teststat <- cos(thetabar - 0)
teststat
kappahat <- kappa$maximum
B <- 1000
simulationnum <- rep(0, B)
simulation <- lapply(simulationnum, FUN =rVM,  kappa = kappahat, n = 100)
teststat.sample <- lapply(simulation, FUN = function(x) cos(circ.mean(data = x, input.type = "radian") - 0))
pvalue <- sum(unlist(teststat.sample) > teststat)/B
pvalue
rVM <- function(mu, kappa, n){
nuC <- cos(mu)
nuS <- sin(mu)
sigma <- 1 / sqrt(kappa)
X <- rnorm(n = n*2, mean = nuC, sd = sigma)
dim(X) <- c(n,2)
X <- X * sigma
X[,1] <- X[,1] + nuC
X[,2] <- X[,2] + nuS
atan2(X[,2], X[,1])
}
thetabar <- circ.mean(hour, input.type = "hour")*pi/12
teststat <- cos(thetabar - 0)
teststat
kappahat <- kappa$maximum
B <- 1000
simulationnum <- rep(0, B)
simulation <- lapply(simulationnum, FUN =rVM,  kappa = kappahat, n = 100)
teststat.sample <- lapply(simulation, FUN = function(x) cos(circ.mean(data = x, input.type = "radian") - 0))
pvalue <- sum(unlist(teststat.sample) > teststat)/B
pvalue
rVM <- function(mu, kappa, n){
nuC <- cos(mu)
nuS <- sin(mu)
sigma <- 1 / sqrt(kappa)
X <- rnorm(n = n*2, mean = 0, sd = 1)
dim(X) <- c(n,2)
X <- X * sigma
X[,1] <- X[,1] + nuC
X[,2] <- X[,2] + nuS
atan2(X[,2], X[,1])
}
thetabar <- circ.mean(hour, input.type = "hour")*pi/12
teststat <- cos(thetabar - 0)
teststat
kappahat <- kappa$maximum
B <- 1000
simulationnum <- rep(0, B)
simulation <- lapply(simulationnum, FUN =rVM,  kappa = kappahat, n = 100)
teststat.sample <- lapply(simulation, FUN = function(x) cos(circ.mean(data = x, input.type = "radian") - 0))
pvalue <- sum(unlist(teststat.sample) > teststat)/B
pvalue
hist(unlist(teststat.sample))
require(graphics)
qqnorm(lmnet)
qqnorm(rstudent(lmest))
