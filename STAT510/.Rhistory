VICV1 <- var(h - b1 * c1)/n
VICV1
?array
library(MASS)
y <- c(47, 76, 97, 107, 123, 139, 152, 159, 191, 201, 200, 207)
x <- rep(c(0.02, 0.06, 0.11, 0.22, 0.56, 1.10), each = 2)
dg <- function(theta, y, x){
dg1 <- 2* sum((y - (theta[1]*x/(x + theta[2]))) * (x / (x + theta[2])))
dg2 <- -2 * sum((y - (theta[1] * x/ (x + theta[2]))) * (theta[1] * x / (x + theta[2])^2))
return(c(dg1, dg2))
}
ddg <- function(theta, y, x){
ddg11 <- -2 * sum(x^2/(x + theta[2])^2)
ddg22 <- 2 * sum(2*theta[1]*x*y/(x + theta[2])^3 - 3 * (theta[1] * x)^2/(x + theta[2])^4)
ddg12 <- 2 * sum(2*theta[1]*x^2/(x + theta[2])^3 - x*y/(x + theta[2])^2)
return(matrix(c(ddg11, ddg12, ddg12, ddg22), nrow = 2))
}
Newton <- function(thetat, y, x){
thetat_new <- thetat - ginv(ddg(thetat,y, x))%*%dg(thetat,y,x)
condition <- (sum((thetat_new - thetat)^2)/(sum((thetat)^2) + 0.00005) > 0.0001)
while (condition){
thetat <- thetat_new
thetat_new <- thetat - ginv(ddg(thetat,y, x))%*%dg(thetat,y,x)
condition <- (sum((thetat_new - thetat)^2)/(sum((thetat)^2) + 0.00005) > 0.0001)
if (is.na(condition))
return("Not Converge")
}
return(thetat)
}
?multiroot
install.packages("roorSolve")
install.packages("rootSolve")
model <- function(theta) dg(theta, y, x)
multiroot(f = model, start = c(0,0))
library(rootSolve)
multiroot(f = model, start = c(0,0))
multiroot(f = model, start = c(100,100))
Newton <- function(thetat, y, x){
thetat_new <- thetat - ginv(ddg(thetat,y, x))%*%dg(thetat,y,x)
condition <- (sum((thetat_new - thetat)^2)/(sum((thetat)^2) + 0.00005) > 0.000001)
while (condition){
thetat <- thetat_new
thetat_new <- thetat - ginv(ddg(thetat,y, x))%*%dg(thetat,y,x)
condition <- (sum((thetat_new - thetat)^2)/(sum((thetat)^2) + 0.00005) > 0.000001)
if (is.na(condition))
return("Not Converge")
}
return(thetat)
}
Newton(c(0,1), y, x)
Newton(c(0.00966,1.066963), y, x)
multiroot(f = model, start = c(0.00966,1.066963))
dg(c(1.676950e-03, -9.800811e-06), y, x)
model
dg(theta = c(1.676950e-03, -9.800811e-06), y, x)
dg(theta = c(2.556222e+138, 2.376369e+154), y, x)
library(MASS)
y <- c(47, 76, 97, 107, 123, 139, 152, 159, 191, 201, 200, 207)
x <- rep(c(0.02, 0.06, 0.11, 0.22, 0.56, 1.10), each = 2)
dg <- function(theta, y, x){
dg1 <- 2* sum((y - (theta[1]*x/(x + theta[2]))) * (x / (x + theta[2])))
dg2 <- -2 * sum((y - (theta[1] * x/ (x + theta[2]))) * (theta[1] * x / (x + theta[2])^2))
return(c(dg1, dg2))
}
ddg <- function(theta, y, x){
ddg11 <- -2 * sum(x^2/(x + theta[2])^2)
ddg22 <- 2 * sum(2*theta[1]*x*y/(x + theta[2])^3 - 3 * (theta[1] * x)^2/(x + theta[2])^4)
ddg12 <- 2 * sum(2*theta[1]*x^2/(x + theta[2])^3 - x*y/(x + theta[2])^2)
return(matrix(c(ddg11, ddg12, ddg12, ddg22), nrow = 2))
}
Newton <- function(thetat, y, x){
thetat_new <- thetat - ginv(ddg(thetat,y, x))%*%dg(thetat,y,x)
condition <- (sqrt(sum((thetat_new - thetat)^2)/(sum((thetat)^2) + 0.00005)) > 0.000001)
while (condition){
thetat <- thetat_new
thetat_new <- thetat - ginv(ddg(thetat,y, x))%*%dg(thetat,y,x)
condition <- (sqrt(sum((thetat_new - thetat)^2)/(sum((thetat)^2) + 0.00005)) > 0.000001)
if (is.na(condition))
return("Not Converge")
}
return(thetat)
}
library(MASS)
y <- c(47, 76, 97, 107, 123, 139, 152, 159, 191, 201, 200, 207)
x <- rep(c(0.02, 0.06, 0.11, 0.22, 0.56, 1.10), each = 2)
g <- function(theta, y, x){
return(-sum((y - theta[1]*x/(x + theta[2]))^2))
}
dg <- function(theta, y, x){
dg1 <- 2* sum((y - (theta[1]*x/(x + theta[2]))) * (x / (x + theta[2])))
dg2 <- -2 * sum((y - (theta[1] * x/ (x + theta[2]))) * (theta[1] * x / (x + theta[2])^2))
return(c(dg1, dg2))
}
SA <- function(thetat, y, x, alpha){
thetat_new <- thetat + alpha * dg(thetat, y, x)
condition <- (sqrt(sum((thetat_new - thetat)^2)/(sum((thetat)^2) + 0.00005)) > 0.000001)
while (condition){
thetat <- thetat_new
thetat_new <- thetat + alpha * dg(thetat, y, x)
while (g(thetat_new) < g(thetat)){
alpha <- alpha/2
thetat_new <- thetat + alpha * dg(thetat, y, x)
}
condition <- (sqrt(sum((thetat_new - thetat)^2)/(sum((thetat)^2) + 0.00005)) > 0.000001)
}
return(thetat)
}
SA(c(0.00966,1.066963), y, x, 1)
library(MASS)
y <- c(47, 76, 97, 107, 123, 139, 152, 159, 191, 201, 200, 207)
x <- rep(c(0.02, 0.06, 0.11, 0.22, 0.56, 1.10), each = 2)
g <- function(theta, y, x){
return(-sum((y - theta[1]*x/(x + theta[2]))^2))
}
dg <- function(theta, y, x){
dg1 <- 2* sum((y - (theta[1]*x/(x + theta[2]))) * (x / (x + theta[2])))
dg2 <- -2 * sum((y - (theta[1] * x/ (x + theta[2]))) * (theta[1] * x / (x + theta[2])^2))
return(c(dg1, dg2))
}
SA <- function(thetat, y, x, alpha){
thetat_new <- thetat + alpha * dg(thetat, y, x)
condition <- (sqrt(sum((thetat_new - thetat)^2)/(sum((thetat)^2) + 0.00005)) > 0.000001)
while (condition){
thetat <- thetat_new
thetat_new <- thetat + alpha * dg(thetat, y, x)
while (g(thetat_new, y, x) < g(thetat, y, x)){
alpha <- alpha/2
thetat_new <- thetat + alpha * dg(thetat, y, x)
}
condition <- (sqrt(sum((thetat_new - thetat)^2)/(sum((thetat)^2) + 0.00005)) > 0.000001)
}
return(thetat)
}
SA(c(0.00966,1.066963), y, x, 1)
dg(c(-356.198,-371297.034), y, x )
g(c(-356.198,-371297.034), y, x )
g(c(0,0), y, x)
g(c(10,0), y, x)
g(c(0,2), y, x)
g(c(-300,-2000), y, x)
dg(c(0.00966,1.066963), y, x)
ddg(c(0.00966,1.066963), y, x)
ddg(c(0.00966,1.066963), y, x)%*%dg(c(0.00966,1.066963), y, x)
library(MASS)
y <- c(47, 76, 97, 107, 123, 139, 152, 159, 191, 201, 200, 207)
x <- rep(c(0.02, 0.06, 0.11, 0.22, 0.56, 1.10), each = 2)
f <- function(theta,x){
return(theta[1]*x/(x + theta[2]))
}
A <- function(theta, x){
df1 <- x/(x + theta[2])
df2 <- - theta[1]*x/(x + theta[2])^2
return(matrix(c(df1, df2), ncol = 2))
}
Z <- function(theta, x){
return(y - f(theta,x))
}
Z(c(0,0), y, x)
f(c(0,0), x)
f(c(1,1), x)
Z(c(1,1), y, x)
Z(c(1,1), y)
Z(theta = c(1,1), y, x)
y - f(c(1,1), x)
Z(theta = c(1,1), y = y, x = x)
Z <- function(theta,y,x){
y <- c(47, 76, 97, 107, 123, 139, 152, 159, 191, 201, 200, 207)
x <- rep(c(0.02, 0.06, 0.11, 0.22, 0.56, 1.10), each = 2)
return(y - f(theta,x))
}
Z <- function(theta){
y <- c(47, 76, 97, 107, 123, 139, 152, 159, 191, 201, 200, 207)
x <- rep(c(0.02, 0.06, 0.11, 0.22, 0.56, 1.10), each = 2)
return(y - f(theta,x))
}
Z(c(1,1))
Z <- function(theta, y, x){
# y <- c(47, 76, 97, 107, 123, 139, 152, 159, 191, 201, 200, 207)
# x <- rep(c(0.02, 0.06, 0.11, 0.22, 0.56, 1.10), each = 2)
return(y - f(theta,x))
}
Z(c(1,1), y, x)
library(MASS)
y <- c(47, 76, 97, 107, 123, 139, 152, 159, 191, 201, 200, 207)
x <- rep(c(0.02, 0.06, 0.11, 0.22, 0.56, 1.10), each = 2)
f <- function(theta,x){
return(theta[1]*x/(x + theta[2]))
}
A <- function(theta, x){
df1 <- x/(x + theta[2])
df2 <- - theta[1]*x/(x + theta[2])^2
return(matrix(c(df1, df2), ncol = 2))
}
Z <- function(theta, y, x){
# y <- c(47, 76, 97, 107, 123, 139, 152, 159, 191, 201, 200, 207)
# x <- rep(c(0.02, 0.06, 0.11, 0.22, 0.56, 1.10), each = 2)
return(y - f(theta,x))
}
GN <- function(thetat, y, x){
At <- A(thetat, x)
Zt <- Z(thetat, y, x)
thetat_new <- thetat + ginv(t(At)%*%At)%*%t(At)%*%Zt
condition <- (sqrt(sum((thetat_new - thetat)^2)/(sum((thetat)^2) + 0.00005)) > 0.000001)
while (condition){
thetat <- thetat_new
At <- A(thetat, x)
Zt <- Z(thetat, y, x)
thetat_new <- thetat + ginv(t(At)%*%At)%*%t(At)%*%Zt
condition <- (sqrt(sum((thetat_new - thetat)^2)/(sum((thetat)^2) + 0.00005)) > 0.000001)
if (is.na(condition))
return("Not Converge")
}
return(thetat)
}
GN(c(1,1), y, x)
GN(c(0.00966,1.066963), y, x)
#Read the data and create factors.
d=read.delim("http://dnett.github.io/S510/HeartRate.txt")
head(d)
d$woman=as.factor(d$woman)
d$drug=as.factor(d$drug)
d$time=as.factor(d$time)
head(d)
# Compute sample means
means = tapply(d$y,
list(d$time,d$drug),mean)
means
#  Make a profile plot of the means
x.axis = unique(d$time)
matplot(c(-1,16), c(70,85), type="n",
xlab="time", ylab="y",
main= "Observed Mean Y")
matlines(x.axis,means,type='l',lty=c(1,2,3),lwd=2)
matpoints(x.axis,means, pch=c(16,17,15),cex=1.5)
legend(4.16, 74 ,legend=c("A",
'B','C'),lty=c(1,2,3),
lwd=2,col=1:3,bty='n')
# Use the lme function. This application
# assumes that each subject has a different
# identification value
library(nlme)
d.lme = lme(y ~ drug*time,
random= ~ 1|woman, data=d,
method="REML")
summary(d.lme)
anova(d.lme)
names(d.lme)
#  Use the gls( ) function to fit a
#  model where the errors have a
#  compound symmetry covariance structure
#  within subjects. Random effects are
#  not used to induce correlation.
d.glscs = gls(y ~ drug*time,
data=d,
correlation = corCompSymm(form=~1|woman),
method="REML")
summary(d.glscs)
anova(d.glscs)
# Try an auto regressive covariance
# structures across time within
# subjects
d.glsar = gls(y ~ drug*time,
data=d,
correlation = corAR1(form=~1|woman),
method="REML")
summary(d.glsar)
anova(d.glsar)
#  Use an arbitray covariance matrix for
#  observations at different time
#  points within subjects
d.gls = gls(y ~ drug*time,
data=d,
correlation = corSymm(form=~1|woman),
weight = varIdent(form = ~ 1|time),
method="REML")
summary(d.gls)
anova(d.gls)
d.gls$contrasts
library(rcpp)
library(Rcpp)
cut(rnorm(100, mean=y, sd=0.25),c(-4,-1.5,0,1.5,4))
cut(rnorm(100, mean=0, sd=0.25),c(-4,-1.5,0,1.5,4))
x <- t(c(rep(1,2,3, each = 2)))
x
diag(x)
diag(t(x))
x <- t(rep(1,2,3, each = 2))
x
x <- rep(1,2,3, each = 2)
x
x <- rep(c(1,2,3), each = 2)
x
t(x)
diag(x)
diag(t(x))
x <- t(x)
x
diag(x)
diag(t(x))
d = read.delim("http://dnett.github.io/S510/LeafArea.txt")
library(lme4)
o = lmer(LeafArea ˜ Dose + (1 + Dose | ResearchStation), data = d)
install.packages("lme4")
d = read.delim("http://dnett.github.io/S510/LeafArea.txt")
library(lme4)
o = lmer(LeafArea ˜ Dose + (1 + Dose | ResearchStation), data = d)
o = lmer(LeafArea ~ Dose + (1 + Dose | ResearchStation), data = d)
summary(o)
sqrt(5.623e-05)
head(d)
o7 = lm(LeafArea ~ Dose, data = d[d$ResearchStation == 7,])
anova(o, test = "Chisq")
fixef(o)
names(o)
o
?lme
?lmer
d = read.delim("http://dnett.github.io/S510/LeafArea.txt")
library(lme4)
o = lmer(LeafArea ˜ Dose + (1 + Dose | ResearchStation), data = d, REML = F)
d = read.delim("http://dnett.github.io/S510/LeafArea.txt")
library(lme4)
o = lmer(LeafArea ~ Dose + (1 + Dose | ResearchStation), data = d, REML = F)
summary(o)
anova(o, test = "Chisq")
o = lme(LeafArea ~ Dose + (1 + Dose | ResearchStation), data = d)
library(nlme)
install.packages("nlme")
install.packages("nlme")
install.packages("nlme")
install.packages("nlme")
library(nlme)
o = lme(LeafArea ~ Dose + (1 + Dose | ResearchStation), data = d)
d = read.delim("http://dnett.github.io/S510/LeafArea.txt")
o = lme(LeafArea ~ Dose + (1 + Dose | ResearchStation), data = d)
head(d)
o = lme(LeafArea ~ Dose , data = d, random = ~ (1 + Dose | ResearchStation))
o = lme(LeafArea ~ Dose , data = d, random = ~ 1 + Dose| ResearchStation)
summary(o)
anova(o)
anova(o, test = "Chisq")
o = lme(LeafArea ~ Dose , data = d, random = ~ 1 + Dose| ResearchStation, method = "ML")
summary(o)
anova(o)
o_red <- lme(LeafArea ~ 1 , data = d, random = ~ 1 + Dose| ResearchStation)
o
o_red <- lme(LeafArea ~ 1 , data = d, random = ~ 1 + Dose| ResearchStation, method = "REML")
o_red <- lme(LeafArea ~ 1 , data = d, random = ~ 1 + Dose| ResearchStation)
o_red
o = lme(LeafArea ~ Dose , data = d, random = ~ 1 + Dose| ResearchStation)
o
names(o)
methods(o)
methods(logLik)
library(lme4)
methods(logLik)
oo <- lmer(Lead ~ Dose + (1 + Doese | ResearchStation), data = d)
oo <- lmer(LeafArea ~ Dose + (1 + Doese | ResearchStation), data = d)
oo <- lmer(LeafArea ~ Dose + (1 + Dose | ResearchStation), data = d)
logLik(oo)
oo_red <- lmer(LeafArea ~ (1 + Dose | ResearchStation), data = d)
logLik(oo_red)
library(ggplot2)
ggplot(d, aes(x = dose, y = LeafArea)) %+% subset(d, ResearchStation = 7)
ggplot(d, aes(x = Dose, y = LeafArea)) %+% subset(d, ResearchStation = 7)
ggplot(d, aes(x = Dose, y = LeafArea)) + geom_point()
ggplot(d, aes(x = Dose, y = LeafArea)) + geom_point(subset(d, ResearchStation = 7))
ggplot(d, aes(x = Dose, y = LeafArea)) + geom_point(subset = subset(d, ResearchStation = 7))
ggplot(subset(d, ResearchStation = 7), aes(x = Dose, y = LeafArea)) + geom_point()
ggplot(subset(d, ResearchStation = 1), aes(x = Dose, y = LeafArea)) + geom_point()
ggplot(d[d$ResearchStation == 7], aes(x = Dose, y = LeafArea)) + geom_point()
ggplot(d[d$ResearchStation == 7,], aes(x = Dose, y = LeafArea)) + geom_point()
ggplot(subset(d, ResearchStation == 1), aes(x = Dose, y = LeafArea)) + geom_point()
ggplot(subset(d, ResearchStation == 7), aes(x = Dose, y = LeafArea)) + geom_point()
ggplot(d[d$ResearchStation == 7,], aes(x = Dose, y = LeafArea)) + geom_point()
ggplot(d[d$ResearchStation == 7,], aes(x = Dose, y = LeafArea)) + geom_point() + geom_abline(fixef(oo))
fixef(oo)
ggplot(d[d$ResearchStation == 7,], aes(x = Dose, y = LeafArea)) + geom_point() + geom_abline(fixef(oo)[1], fixef(oo)[2])
fixef(oo)[1]
ggplot(d[d$ResearchStation == 7,], aes(x = Dose, y = LeafArea)) + geom_point() + geom_abline(intercept = fixef(oo)[1], slope = fixef(oo)[2])
ranef(oo)
ranef(oo)[7]
ranef(oo)[7,]
dim(ranef(oo))
mode(ranef(oo))
ranef(oo)[[1]]
ranef(oo)[[2]]
length(ranef(oo))
u <- as.matrix(ranef(oo)))
u <- as.matrix(ranef(oo))
u
ranef(oo)[[1]][7,]
ranef(oo)[[1]][7,] + fixef(oo)
ggplot(d[d$ResearchStation == 7,], aes(x = Dose, y = LeafArea)) + geom_point() + geom_abline(intercept = fixef(oo)[1], slope = fixef(oo)[2], show_guide = T)
ggplot(d[d$ResearchStation == 7,], aes(x = Dose, y = LeafArea)) + geom_point() + geom_abline(intercept = fixef(oo)[1], slope = fixef(oo)[2], show.legend = T)
coef(o7)
fixef(o7)
o7 = lm(LeafArea ~ Dose, data = d[d$ResearchStation == 7,])
coef(o7)
ggplot(d[d$ResearchStation == 7,], aes(x = Dose, y = LeafArea)) + geom_point() + geom_abline(intercept = fixef(oo)[1], slope = fixef(oo)[2], show.legend = T) + geom_abline(aes(linetype = 7), intercept = coef(o7)[1], slope = coef(o7)[2], show.legend = T)
ggplot(d[d$ResearchStation == 7,], aes(x = Dose, y = LeafArea)) + geom_point() + geom_abline(intercept = fixef(oo)[1], slope = fixef(oo)[2], show.legend = T) + geom_abline(aes(linetype = 11), intercept = coef(o7)[1], slope = coef(o7)[2], show.legend = T)
ggplot(d[d$ResearchStation == 7,], aes(x = Dose, y = LeafArea)) + geom_point() + geom_abline(intercept = fixef(oo)[1], slope = fixef(oo)[2], show.legend = T) + geom_abline(aes(linetype = "b"), intercept = coef(o7)[1], slope = coef(o7)[2], show.legend = T)
ggplot(d[d$ResearchStation == 7,], aes(x = Dose, y = LeafArea)) + geom_point() + geom_abline(intercept = fixef(oo)[1], slope = fixef(oo)[2], show.legend = T) + geom_abline(aes(linetype = "k"), intercept = coef(o7)[1], slope = coef(o7)[2], show.legend = T)
ggplot(d[d$ResearchStation == 7,], aes(x = Dose, y = LeafArea)) + geom_point() + geom_abline(intercept = fixef(oo)[1], slope = fixef(oo)[2]) + geom_abline(aes(linetype = "k"), intercept = coef(o7)[1], slope = coef(o7)[2])
geom_abline(aes(linetype = "k"), intercept = 0, slope = 1)
ggplot(NULL) + geom_abline(aes(linetype = "k"), intercept = 0, slope = 1)
ggplot(NULL) + geom_abline(aes(linetype = "dashed"), intercept = 0, slope = 1)
cco <- fixef(oo)
dco <- fixef(oo) + ranef(oo)[[1]][7]
ranef(oo)
ranef(oo)[[1]][7,]
dco <- fixef(oo) + ranef(oo)[[1]][7,]
eco <- coef(o7)
cbind(cco, dco, eco)
cco
dco
eco
dco[1]
ab <- data.frame(line = c("c", "d", "e"), intercept = c(cco[1], dco[1], eco[1]), slope = c(cco[2], dco[2], eco[2]))
ab
cco <-  as.vector(cco)
cco
dco <- as.vector(dco)
eco <- as.vector(eco)
ab <- data.frame(line = c("c", "d", "e"), intercept = c(cco[1], dco[1], eco[1]), slope = c(cco[2], dco[2], eco[2]))
ab
dco
c(cco[1], dco[1], eco[1])
cco
dco
eco
names(dco) <- NULL
dco
c(cco[1], dco[1], eco[1])
aa <- matrix(cco, dco, eco)
aa <- matrix(cco, dco, eco, nrow = 2)
as.numeric(dco)
dco <- as.numeric(dco)
ab <- data.frame(line = c("c", "d", "e"), intercept = c(cco[1], dco[1], eco[1]), slope = c(cco[2], dco[2], eco[2]))
ab
ggplot() +
scale_x_continuous(name="x", limits=c(0,10)) +
scale_y_continuous(name="y", limits=c(0,30)) +
geom_abline(data=ab, mapping=aes(slope=slope, intercept=intercept, linetype=line)
opts(title="geom_abline", plot.title=theme_text(size=40, vjust=1.5))
ggplot() + scale_x_continuous(name="x", limits=c(0,10)) + scale_y_continuous(name="y", limits=c(0,30))
ggplot() + scale_x_continuous(name="x", limits=c(0,10)) + scale_y_continuous(name="y", limits=c(0,30)) + geom_abline(data=ab, mapping=aes(slope=slope, intercept=intercept, linetype=line)
scale_linetype()
ggplot() + scale_x_continuous(name="x", limits=c(0,10)) + scale_y_continuous(name="y", limits=c(0,30)) + geom_abline(data=ab, mapping=aes(slope=slope, intercept=intercept, linetype=line) + scale_linetype()
)
ggplot() + scale_x_continuous(name="x", limits=c(0,10)) + scale_y_continuous(name="y", limits=c(0,30))
ggplot() + scale_x_continuous(name="x", limits=c(0,10)) + scale_y_continuous(name="y", limits=c(0,30)) + geom_abline(data=ab, mapping=aes(slope=slope, intercept=intercept, linetype=line))
ggplot(d[d$ResearchStation == 7,], aes(x = Dose, y = LeafArea)) + geom_point() + geom_abline(data=ab, mapping=aes(slope=slope, intercept=intercept, linetype=line))
methods(AIC)
AIC(oo)
summary(o)
AIC(oo)
AIC(oo_red)
oo_red2 <- lmer(LeafArea ~ 0 + Dose + (1 + Dose | ResearchStation), data = d)
summary(oo_red2)
AIC(oo_red2)
AIC(oo)
AIC(oo_red)
summary(oo)
3.238626*0.007499*0.06
cco
dco
round(dco, 3)
round(eco)
round(eco, 3)
2*(logLik(oo) - logLik(oo_red))
AIC(oo)
AIC(oo_red2)
AIC(oo_red)
d
?system.time
x <- array(dim = 100)
system.time(for (i in 1:100) x[i] = i)
x[i]
x[12]
x <- rep(1,10)
y <- rep(2,10)
o <- list(x,y)
o
save(o, file = "test.Rda")
load(file = "test.Rda")
o
d = read.delim("http://dnett.github.io/S510/LeafArea.txt")
library(lme4)
#o = lme(LeafArea ~ Dose , data = d, random = ~ 1 + Dose| ResearchStation)
oo <- lmer(LeafArea ~ Dose + (1 + Dose | ResearchStation), data = d)
summary(oo)
o7 = lm(LeafArea ~ Dose, data = d[d$ResearchStation == 7,])
#o_red <- lme(LeafArea ~ 1 , data = d, random = ~ 1 + Dose| ResearchStation)
oo_red <- lmer(LeafArea ~ (1 + Dose | ResearchStation), data = d)
#f
cco <- fixef(oo)
dco <- fixef(oo) + ranef(oo)[[1]][7,]
eco <- coef(o7)
cco <- as.numeric(cco)
dco <- as.numeric(dco)
eco <- as.numeric(eco)
ab <- data.frame(line = c("c", "d", "e"), intercept = c(cco[1], dco[1], eco[1]), slope = c(cco[2], dco[2], eco[2]))
#plot
ggplot(d[d$ResearchStation == 7,], aes(x = Dose, y = LeafArea)) + geom_point() + geom_abline(data=ab, mapping=aes(slope=slope, intercept=intercept, linetype=line))
# i,j,k
AIC(oo)
oo_red2 <- lmer(LeafArea ~ 0 + Dose + (1 + Dose | ResearchStation), data = d)
AIC(oo_red2)
AIC(oo_red)
setwd("C:/Users/fanne/Documents/Homework/STAT510")
getwd()
